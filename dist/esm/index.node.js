import*as e from"@juanelas/base64";import{decode as t}from"@juanelas/base64";import{hexToBuf as i,bufToHex as a}from"bigint-conversion";import{randBytes as r,randBytesSync as n}from"bigint-crypto-utils";import o from"elliptic";import{importJWK as s,CompactEncrypt as c,compactDecrypt as d,jwtVerify as f,generateSecret as l,exportJWK as h,GeneralSign as p,generalVerify as w,SignJWT as g}from"jose";import{ethers as u,Wallet as b}from"ethers";import{hashable as y}from"object-sha";import{SigningKey as m}from"ethers/lib/utils";class v extends Error{constructor(e,t){super(e),e instanceof v?(this.nrErrors=e.nrErrors,this.add(...t)):this.nrErrors=t}add(...e){e.forEach((e=>this.nrErrors.push(e)))}}const{ec:k}=o;async function x(t,a,n){const o=["ES256","ES384","ES512"];if(!o.includes(t))throw new v(new RangeError(`Invalid signature algorithm '${t}''. Allowed algorithms are ${o.toString()}`),["invalid algorithm"]);let s,c,d;switch(t){case"ES512":c="P-521",s=66;break;case"ES384":c="P-384",s=48;break;default:c="P-256",s=32}d=void 0!==a?"string"==typeof a?!0===n?e.decode(a):new Uint8Array(i(a)):a:new Uint8Array(await r(s));const f=new k("p"+c.substring(c.length-3)).keyFromPrivate(d),l=f.getPublic(),h=l.getX().toString("hex").padStart(2*s,"0"),p=l.getY().toString("hex").padStart(2*s,"0"),w=f.getPrivate("hex").padStart(2*s,"0"),g={kty:"EC",crv:c,x:e.encode(i(h),!0,!1),y:e.encode(i(p),!0,!1),d:e.encode(i(w),!0,!1),alg:t},u={...g};return delete u.d,{publicJwk:u,privateJwk:g}}async function P(e,t){try{return await s(e,t)}catch(e){throw new v(e,["invalid key"])}}async function A(e,t,i){let a;const r={...t};if("A128GCM"===t.alg||"A256GCM"===t.alg)a="dir";else{if("ES256"!==t.alg&&"ES384"!==t.alg&&"ES512"!==t.alg)throw new v(`Not a valid symmetric or assymetric alg: ${t.alg}`,["encryption failed","invalid key","invalid algorithm"]);a="ECDH-ES",r.alg=a}const n=await P(r);let o;try{return o=await new c(e).setProtectedHeader({alg:a,enc:i,kid:t.kid}).encrypt(n),o}catch(e){throw new v(e,["encryption failed"])}}async function E(e,t,i="A256GCM"){try{const a={...t};if("ES256"===t.alg||"ES384"===t.alg||"ES512"===t.alg)a.alg="ECDH-ES";else if("A128GCM"!==t.alg&&"A256GCM"!==t.alg)throw new v(`Not a valid symmetric or assymetric alg: ${t.alg}`,["encryption failed","invalid key","invalid algorithm"]);const r=await P(a);return await d(e,r,{contentEncryptionAlgorithms:[i]})}catch(e){throw new v(e,["decryption failed"])}}async function S(t,i){const a=t.match(/^([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)$/);if(null===a)throw new v(new Error(`${t} is not a JWS`),["not a compact jws"]);let r,n;try{r=JSON.parse(e.decode(a[1],!0)),n=JSON.parse(e.decode(a[2],!0))}catch(e){throw new v(e,["invalid format","not a compact jws"])}if(void 0!==i){const e="function"==typeof i?await i(r,n):i,a=await P(e);try{const i=await f(t,a);return{header:i.protectedHeader,payload:i.payload,signer:e}}catch(e){throw new v(e,["jws verification failed"])}}return{header:r,payload:n}}function C(e,t,i,a=2e3){if(e<t-a)throw new v(new Error(`timestamp ${new Date(e).toTimeString()} before 'notBefore' ${new Date(t).toTimeString()} with tolerance of ${a/1e3}s`),["invalid timestamp"]);if(e>i+a)throw new v(new Error(`timestamp ${new Date(e).toTimeString()} after 'notAfter' ${new Date(i).toTimeString()} with tolerance of ${a/1e3}s`),["invalid timestamp"])}function J(e){return Array.isArray(e)?e.sort().map(J):(t=e,"[object Object]"===Object.prototype.toString.call(t)?Object.keys(e).sort().reduce((function(t,i){return t[i]=J(e[i]),t}),{}):e);var t}function T(e,t=!1,i){const a=e.match(/^(0x)?(([\da-fA-F][\da-fA-F])+)$/);if(null==a)throw new v(new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'"),["invalid format"]);let r=a[2];if(void 0!==i){if(i<r.length/2)throw new v(new RangeError(`expected byte length ${i} < input hex byte length ${Math.ceil(r.length/2)}`),["invalid format"]);r=r.padStart(2*i,"0")}return t?"0x"+r:r}async function j(e,t){try{await P(e,e.alg);const i=J(e);return t?JSON.stringify(i):i}catch(e){throw new v(e,["invalid key"])}}async function _(e,t){const i=["SHA-256","SHA-384","SHA-512"];if(!i.includes(t))throw new v(new RangeError(`Valid hash algorith values are any of ${JSON.stringify(i)}`),["invalid algorithm"]);const a=new TextEncoder,r="string"==typeof e?a.encode(e).buffer:e;try{let e;{const i=t.toLowerCase().replace("-","");e=new Uint8Array((await import("crypto")).createHash(i).update(Buffer.from(r)).digest())}return e}catch(e){throw new v(e,["unexpected error"])}}function R(e){const t=e.match(/^(0x)?([\da-fA-F]{40})$/);if(null==t)throw new RangeError("incorrect address format");const i=t[2];return u.utils.getAddress("0x"+i)}function D(e){const t=e.match(/^did:ethr:(\w+:)?(0x[0-9a-fA-F]{40}[0-9a-fA-F]{26}?)$/),i=null!==t?t[t.length-1]:e;try{return u.utils.computeAddress(i)}catch(e){throw new v("no a DID or a valid public or private key",["invalid format"])}}async function N(r,n,o){let s,c;switch(r){case"A128GCM":c=16;break;case"A256GCM":c=32;break;default:throw new v(new Error(`Invalid encAlg '${r}'. Supported values are: ${["A128GCM","A256GCM"].toString()}`),["invalid algorithm"])}if(void 0!==n){if(s="string"==typeof n?!0===o?e.decode(n):new Uint8Array(i(T(n,void 0,c))):n,s.length!==c)throw new v(new RangeError(`Expected secret length ${c} does not meet provided one ${s.length}`),["invalid key"])}else try{s=await l(r,{extractable:!0})}catch(e){throw new v(e,["unexpected error"])}const d=await h(s);return d.alg=r,{jwk:d,hex:a(t(d.k))}}async function O(e,t){if(void 0===e.alg||void 0===t.alg||e.alg!==t.alg)throw new Error("alg no present in either pubJwk or privJwk, or pubJWK.alg != privJWK.alg");const i=await P(e),a=await P(t);try{const e=await r(16),n=await new p(e).addSignature(a).setProtectedHeader({alg:t.alg}).sign();await w(n,i)}catch(e){throw new v(e,["unexpected error"])}}async function $(t){return e.encode(await _(y(t),"SHA-256"),!0,!1)}const I=["SHA-256","SHA-384","SHA-512"],z=["ES256","ES384","ES512"],H=["A128GCM","A256GCM"];function B(e){if(new Date(e).getTime()>0)return Number(e);throw new v(new Error("invalid timestamp"),["invalid timestamp"])}async function M(e){const t=Object.keys(e);if(t.length<10||t.length>11)throw new v(new Error("Invalid agreeemt: "+JSON.stringify(e,void 0,2)),["invalid format"]);for(const i of t){let t;switch(i){case"orig":case"dest":if(e[i]!==await j(JSON.parse(e[i]),!0))throw new v(`[dataExchangeAgreeement.${i}] A valid stringified JWK must be provided. For uniqueness, JWK claims must be sorted in the stringified JWK. You can use the parseJWK(jwk, true) for that purpose`,["invalid key","invalid format"]);break;case"ledgerContractAddress":case"ledgerSignerAddress":try{t=R(e[i])}catch(e){throw new v(e.message,["invalid format"])}if(e[i]!==t)throw new v(`[dataExchangeAgreeement.${i}] Invalid EIP-55 address ${e[i]}. Did you mean ${t} instead?`,["invalid format"]);break;case"pooToPorDelay":case"pooToPopDelay":case"pooToSecretDelay":if(e[i]!==B(e[i]))throw new v(`[dataExchangeAgreeement.${i}] < 0 or not a number`,["invalid format"]);break;case"hashAlg":if(!I.includes(e[i]))throw new v(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"encAlg":if(!H.includes(e[i]))throw new v(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"signingAlg":if(!z.includes(e[i]))throw new v(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"schema":break;default:throw new v(new Error(`Property ${i} not allowed in dataAgreement`),["invalid format"])}}}async function q(e,t){if(void 0===e.iss)throw new Error('Payload iss should be set to either "orig" or "dest"');const i=JSON.parse(e.exchange[e.iss]);await O(i,t);const a=await P(t),r=t.alg,n={...e,iat:Math.floor(Date.now()/1e3)};return{jws:await new g(n).setProtectedHeader({alg:r}).setIssuedAt(n.iat).sign(a),payload:n}}async function U(e,t,i){const a=JSON.parse(t.exchange[t.iss]),r=await S(e,a);if(void 0===r.payload.iss)throw new Error('Property "iss" missing');if(void 0===r.payload.iat)throw new Error("Property claim iat missing");if(void 0!==i){C("iat"===i.timestamp?1e3*r.payload.iat:i.timestamp,"iat"===i.notBefore?1e3*r.payload.iat:i.notBefore,"iat"===i.notAfter?1e3*r.payload.iat:i.notAfter,i.tolerance)}const n=r.payload,o=n.exchange[n.iss];if(y(a)!==y(JSON.parse(o)))throw new Error(`The proof is issued by ${o} instead of ${JSON.stringify(a)}`);const s=t;for(const e in s){if(void 0===n[e])throw new Error(`Expected key '${e}' not found in proof`);if("exchange"===e){const e=t.exchange;F(n.exchange,e)}else if(""!==s[e]&&y(s[e])!==y(n[e]))throw new Error(`Proof's ${e}: ${JSON.stringify(n[e],void 0,2)} does not meet provided value ${JSON.stringify(s[e],void 0,2)}`)}return r}function F(e,t){const i=["id","orig","dest","hashAlg","cipherblockDgst","blockCommitment","blockCommitment","secretCommitment","schema"];for(const t of i)if("schema"!==t&&(void 0===e[t]||""===e[t]))throw new Error(`${t} is missing on dataExchange.\ndataExchange: ${JSON.stringify(e,void 0,2)}`);for(const i in t)if(""!==t[i]&&y(t[i])!==y(e[i]))throw new Error(`dataExchange's ${i}: ${JSON.stringify(e[i],void 0,2)} does not meet expected value ${JSON.stringify(t[i],void 0,2)}`)}async function L(e,t,i=10){const{payload:a}=await S(e),r=a.exchange,n={...r};delete n.id;if(await $(n)!==r.id)throw new v(new Error("data exchange integrity failed"),["dataExchange integrity violated"]);const o=JSON.parse(r.dest),s=JSON.parse(r.orig);let c,d,f;try{c=(await U(a.poo,{iss:"orig",proofType:"PoO",exchange:r})).payload}catch(e){throw new v(e,["invalid poo"])}try{await U(e,{iss:"dest",proofType:"PoR",exchange:r},{timestamp:"iat",notBefore:1e3*c.iat,notAfter:1e3*c.iat+r.pooToPorDelay})}catch(e){throw new v(e,["invalid por"])}try{const e=await t.getSecretFromLedger(r.ledgerSignerAddress,r.id,i);d=e.hex,f=e.iat}catch(e){throw new v(e,["cannot verify"])}try{C(1e3*f,1e3*a.iat,1e3*c.iat+r.pooToSecretDelay)}catch(e){throw new v(`Although the secret has been obtained (and you could try to decrypt the cipherblock), it's been published later than agreed: ${new Date(1e3*f).toUTCString()} > ${new Date(1e3*c.iat+r.pooToSecretDelay).toUTCString()}`,["secret not published in time"])}return{pooPayload:c,porPayload:a,secretHex:d,destPublicJwk:o,origPublicJwk:s}}async function G(e,t,i=10){let a,r,n,o,s;try{a=(await S(e)).payload}catch(e){throw new v(e,["invalid verification request"])}try{const e=await L(a.por,t,i);r=e.destPublicJwk,n=e.origPublicJwk,o=e.pooPayload,s=e.porPayload}catch(e){throw new v(e,["invalid por","invalid verification request"])}try{await S(e,"dest"===a.iss?r:n)}catch(e){throw new v(e,["invalid verification request"])}return{pooPayload:o,porPayload:s,vrPayload:a,destPublicJwk:r,origPublicJwk:n}}async function W(t,i){const{payload:a}=await S(t),{destPublicJwk:r,origPublicJwk:n,secretHex:o,pooPayload:s,porPayload:c}=await L(a.por,i);try{await S(t,r)}catch(e){throw e instanceof v&&e.add("invalid dispute request"),e}if(e.encode(await _(a.cipherblock,c.exchange.hashAlg),!0,!1)!==c.exchange.cipherblockDgst)throw new v(new Error("cipherblock does not meet the committed (and already accepted) one"),["invalid dispute request"]);return await E(a.cipherblock,(await N(c.exchange.encAlg,o)).jwk),{pooPayload:s,porPayload:c,drPayload:a,destPublicJwk:r,origPublicJwk:n}}async function V(e,t,i,a){const r={proofType:"request",iss:e,dataExchangeId:t,por:i,type:"verificationRequest",iat:Math.floor(Date.now()/1e3)},n=await s(a);return await new g(r).setProtectedHeader({alg:a.alg}).setIssuedAt(r.iat).sign(n)}var K=Object.freeze({__proto__:null,checkCompleteness:G,checkDecryption:W,ConflictResolver:class{constructor(e,t){this.jwkPair=e,this.dltAgent=t,this.initialized=new Promise(((e,t)=>{this.init().then((()=>{e(!0)})).catch((e=>{t(e)}))}))}async init(){await O(this.jwkPair.publicJwk,this.jwkPair.privateJwk)}async resolveCompleteness(e){await this.initialized;const{payload:t}=await S(e);let i;try{i=(await S(t.por)).payload}catch(e){throw new v(e,["invalid por"])}const a={...await this._resolution(t.dataExchangeId,i.exchange[t.iss]),resolution:"not completed",type:"verification"};try{await G(e,this.dltAgent),a.resolution="completed"}catch(e){if(!(e instanceof v)||e.nrErrors.includes("invalid verification request")||e.nrErrors.includes("unexpected error"))throw e}const r=await s(this.jwkPair.privateJwk);return await new g(a).setProtectedHeader({alg:this.jwkPair.privateJwk.alg}).setIssuedAt(a.iat).sign(r)}async resolveDispute(e){await this.initialized;const{payload:t}=await S(e);let i;try{i=(await S(t.por)).payload}catch(e){throw new v(e,["invalid por"])}const a={...await this._resolution(t.dataExchangeId,i.exchange[t.iss]),resolution:"denied",type:"dispute"};try{await W(e,this.dltAgent)}catch(e){if(!(e instanceof v&&e.nrErrors.includes("decryption failed")))throw new v(e,["cannot verify"]);a.resolution="accepted"}const r=await s(this.jwkPair.privateJwk);return await new g(a).setProtectedHeader({alg:this.jwkPair.privateJwk.alg}).setIssuedAt(a.iat).sign(r)}async _resolution(e,t){return{proofType:"resolution",dataExchangeId:e,iat:Math.floor(Date.now()/1e3),iss:await j(this.jwkPair.publicJwk,!0),sub:t}}},generateVerificationRequest:V,verifyPor:L,verifyResolution:async function(e,t){return await S(e,t??((e,t)=>JSON.parse(t.iss)))}});const Z={gasLimit:125e5,contract:{address:"0x8d407A1722633bDD1dcf221474be7a44C05d7c2F",abi:[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"dataExchangeId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"},{indexed:!1,internalType:"uint256",name:"secret",type:"uint256"}],name:"Registration",type:"event"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"registry",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"secret",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_dataExchangeId",type:"uint256"},{internalType:"uint256",name:"_secret",type:"uint256"}],name:"setRegistry",outputs:[],stateMutability:"nonpayable",type:"function"}],transactionHash:"0x6a3828f8fe232819dc40ca66f93930b3bd1619db31a67ec34b44446b3e7c8289",receipt:{to:null,from:"0x17bd12C2134AfC1f6E9302a532eFE30C19B9E903",contractAddress:"0x8d407A1722633bDD1dcf221474be7a44C05d7c2F",transactionIndex:0,gasUsed:"253928",logsBloom:"0xblockHash:"0x0118672bb9b27679e616831d056d36291dd20cfe88c3ee2abd8f2dfce579cad4",transactionHash:"0x6a3828f8fe232819dc40ca66f93930b3bd1619db31a67ec34b44446b3e7c8289",logs:[],blockNumber:119389,cumulativeGasUsed:"253928",status:1,byzantium:!0},args:[],solcInputHash:"c528a37588793ef74285d75e08d6b8eb",metadata:'{"compiler":{"version":"0.8.4+commit.c7e474f2"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"dataExchangeId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"secret","type":"uint256"}],"name":"Registration","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"registry","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"secret","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dataExchangeId","type":"uint256"},{"internalType":"uint256","name":"_secret","type":"uint256"}],"name":"setRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/NonRepudiation.sol":"NonRepudiation"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/NonRepudiation.sol":{"content":"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract NonRepudiation {\\n    struct Proof {\\n        uint256 timestamp;\\n        uint256 secret;\\n    }\\n    mapping(address => mapping (uint256 => Proof)) public registry;\\n    event Registration(address sender, uint256 dataExchangeId, uint256 timestamp, uint256 secret);\\n\\n    function setRegistry(uint256 _dataExchangeId, uint256 _secret) public {\\n        require(registry[msg.sender][_dataExchangeId].secret == 0);\\n        registry[msg.sender][_dataExchangeId] = Proof(block.timestamp, _secret);\\n        emit Registration(msg.sender, _dataExchangeId, block.timestamp, _secret);\\n    }\\n}\\n","keccak256":"0x8d371257a9b03c9102f158323e61f56ce49dd8489bd92c5a7d8abc3d9f6f8399","license":"Unlicense"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506103a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063032439371461003b578063d05cb54514610057575b600080fd5b6100556004803603810190610050919061023a565b610088565b005b610071600480360381019061006c91906101fe565b6101a3565b60405161007f9291906102d9565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010154146100e757600080fd5b6040518060400160405280428152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000155602082015181600101559050507faa58599838af2e5e0f3251cfbb4eac5d5d447ded49f6b0ac28d6b44098224e63338342846040516101979493929190610294565b60405180910390a15050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000813590506101e38161033e565b92915050565b6000813590506101f881610355565b92915050565b6000806040838503121561021157600080fd5b600061021f858286016101d4565b9250506020610230858286016101e9565b9150509250929050565b6000806040838503121561024d57600080fd5b600061025b858286016101e9565b925050602061026c858286016101e9565b9150509250929050565b61027f81610302565b82525050565b61028e81610334565b82525050565b60006080820190506102a96000830187610276565b6102b66020830186610285565b6102c36040830185610285565b6102d06060830184610285565b95945050505050565b60006040820190506102ee6000830185610285565b6102fb6020830184610285565b9392505050565b600061030d82610314565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61034781610302565b811461035257600080fd5b50565b61035e81610334565b811461036957600080fd5b5056fea26469706673582212204fd0fc653fb487221da9a14a4ca5d5499f9e9bc7b27ac8ab0f8d397fd6e3148564736f6c63430008040033",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063032439371461003b578063d05cb54514610057575b600080fd5b6100556004803603810190610050919061023a565b610088565b005b610071600480360381019061006c91906101fe565b6101a3565b60405161007f9291906102d9565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010154146100e757600080fd5b6040518060400160405280428152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000155602082015181600101559050507faa58599838af2e5e0f3251cfbb4eac5d5d447ded49f6b0ac28d6b44098224e63338342846040516101979493929190610294565b60405180910390a15050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000813590506101e38161033e565b92915050565b6000813590506101f881610355565b92915050565b6000806040838503121561021157600080fd5b600061021f858286016101d4565b9250506020610230858286016101e9565b9150509250929050565b6000806040838503121561024d57600080fd5b600061025b858286016101e9565b925050602061026c858286016101e9565b9150509250929050565b61027f81610302565b82525050565b61028e81610334565b82525050565b60006080820190506102a96000830187610276565b6102b66020830186610285565b6102c36040830185610285565b6102d06060830184610285565b95945050505050565b60006040820190506102ee6000830185610285565b6102fb6020830184610285565b9392505050565b600061030d82610314565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61034781610302565b811461035257600080fd5b50565b61035e81610334565b811461036957600080fd5b5056fea26469706673582212204fd0fc653fb487221da9a14a4ca5d5499f9e9bc7b27ac8ab0f8d397fd6e3148564736f6c63430008040033",devdoc:{kind:"dev",methods:{},version:1},userdoc:{kind:"user",methods:{},version:1},storageLayout:{storage:[{astId:13,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"registry",offset:0,slot:"0",type:"t_mapping(t_address,t_mapping(t_uint256,t_struct(Proof)6_storage))"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(Proof)6_storage))":{encoding:"mapping",key:"t_address",label:"mapping(address => mapping(uint256 => struct NonRepudiation.Proof))",numberOfBytes:"32",value:"t_mapping(t_uint256,t_struct(Proof)6_storage)"},"t_mapping(t_uint256,t_struct(Proof)6_storage)":{encoding:"mapping",key:"t_uint256",label:"mapping(uint256 => struct NonRepudiation.Proof)",numberOfBytes:"32",value:"t_struct(Proof)6_storage"},"t_struct(Proof)6_storage":{encoding:"inplace",label:"struct NonRepudiation.Proof",members:[{astId:3,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"timestamp",offset:0,slot:"0",type:"t_uint256"},{astId:5,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"secret",offset:0,slot:"1",type:"t_uint256"}],numberOfBytes:"64"},t_uint256:{encoding:"inplace",label:"uint256",numberOfBytes:"32"}}}}};async function X(t,i,r,n){let o=u.BigNumber.from(0),s=u.BigNumber.from(0);const c=T(a(e.decode(r)),!0);let d=0;do{try{({secret:o,timestamp:s}=await t.registry(T(i,!0),c))}catch(e){throw new v(e,["cannot contact the ledger"])}o.isZero()&&(d++,await new Promise((e=>setTimeout(e,1e3))))}while(o.isZero()&&d<n);if(o.isZero())throw new v(new Error(`timeout of ${n}s exceeded when querying the ledger and secret still not published`),["secret not published"]);return{hex:T(o.toHexString(),!1),iat:s.toNumber()}}async function Y(t,i,r){const n=u.BigNumber.from(T(t,!0)),o=T(a(e.decode(i)),!0),s=await r.contract.populateTransaction.setRegistry(o,n,{gasLimit:r.dltConfig.gasLimit});s.nonce=await r.nextNonce(),s.gasLimit=s.gasLimit?._hex,s.gasPrice=(await r.provider.getGasPrice())._hex,s.chainId=(await r.provider.getNetwork()).chainId;const c=await r.getAddress();return s.from=T(c,!0),s}class Q{}class ee extends Q{constructor(e){super(),this.initialized=new Promise(((t,i)=>{null!==e&&"object"==typeof e&&"function"==typeof e.then?e.then((e=>{this.dltConfig={...Z,...e},this.provider=new u.providers.JsonRpcProvider(this.dltConfig.rpcProviderUrl),this.contract=new u.Contract(this.dltConfig.contract.address,this.dltConfig.contract.abi,this.provider),t(!0)})).catch((e=>i(e))):(this.dltConfig={...Z,...e},this.provider=new u.providers.JsonRpcProvider(this.dltConfig.rpcProviderUrl),this.contract=new u.Contract(this.dltConfig.contract.address,this.dltConfig.contract.abi,this.provider),t(!0))}))}async getContractAddress(){return await this.initialized,this.contract.address}}class te extends ee{async getSecretFromLedger(e,t,i){return await X(this.contract,e,t,i)}}class ie extends ee{constructor(e,t,i){super(new Promise(((t,a)=>{e.providerinfo.get().then((e=>{const r=e.rpcUrl;void 0===r?a(new Error("wallet is not connected to RRP endpoint")):t({...i,rpcProviderUrl:r})})).catch((e=>{a(e)}))}))),this.wallet=e,this.did=t}}class ae extends ie{async getSecretFromLedger(e,t,i){return await this.initialized,await X(this.contract,e,t,i)}}class re extends ee{constructor(e,t,i){super(new Promise(((t,a)=>{e.providerinfoGet().then((e=>{const r=e.rpcUrl;void 0===r?a(new Error("wallet is not connected to RRP endpoint")):t({...i,rpcProviderUrl:r})})).catch((e=>{a(e)}))}))),this.wallet=e,this.did=t}}class ne extends re{async getSecretFromLedger(e,t,i){return await this.initialized,await X(this.contract,e,t,i)}}class oe extends ee{constructor(e,t){let a;super(e),this.count=-1,a=void 0===t?n(32):"string"==typeof t?new Uint8Array(i(t)):t;const r=new m(a);this.signer=new b(r,this.provider)}async deploySecret(e,t){const i=await Y(e,t,this),a=await this.signer.signTransaction(i),r=await this.signer.provider.sendTransaction(a);return this.count=this.count+1,r.hash}async getAddress(){return this.signer.address}async nextNonce(){const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}class se extends ie{constructor(){super(...arguments),this.count=-1}async deploySecret(e,t){await this.initialized;const i=await Y(e,t,this),a=(await this.wallet.identities.sign({did:this.did},{type:"Transaction",data:i})).signature,r=await this.provider.sendTransaction(a);return this.count=this.count+1,r.hash}async getAddress(){await this.initialized;const e=await this.wallet.identities.info({did:this.did});if(void 0===e.addresses)throw new v(new Error("no addresses for did "+this.did),["unexpected error"]);return e.addresses[0]}async nextNonce(){await this.initialized;const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}class ce extends re{constructor(){super(...arguments),this.count=-1}async deploySecret(e,t){await this.initialized;const i=await Y(e,t,this),a=(await this.wallet.identitySign({did:this.did},{type:"Transaction",data:i})).signature,r=await this.provider.sendTransaction(a);return this.count=this.count+1,r.hash}async getAddress(){await this.initialized;const e=await this.wallet.identityInfo({did:this.did});if(void 0===e.addresses)throw new v(`Can't get address for did: ${this.did}`,["unexpected error"]);return e.addresses[0]}async nextNonce(){await this.initialized;const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}var de=Object.freeze({__proto__:null,EthersIoAgentDest:te,I3mWalletAgentDest:ae,I3mServerWalletAgentDest:ne,EthersIoAgentOrig:oe,I3mWalletAgentOrig:se,I3mServerWalletAgentOrig:ce});var fe=Object.freeze({__proto__:null,NonRepudiationDest:class{constructor(e,t,i){this.initialized=new Promise(((a,r)=>{this.asyncConstructor(e,t,i).then((()=>{a(!0)})).catch((e=>{r(e)}))}))}async asyncConstructor(e,t,i){await M(e),this.agreement=e,this.jwkPairDest={privateJwk:t,publicJwk:JSON.parse(e.dest)},this.publicJwkOrig=JSON.parse(e.orig),await O(this.jwkPairDest.publicJwk,this.jwkPairDest.privateJwk),this.dltAgent=i;const a=await this.dltAgent.getContractAddress();if(this.agreement.ledgerContractAddress!==a)throw new Error(`Contract address ${a} does not meet agreed one ${this.agreement.ledgerContractAddress}`);this.block={}}async verifyPoO(t,i,a){await this.initialized;const r=e.encode(await _(i,this.agreement.hashAlg),!0,!1),{payload:n}=await S(t),o={...this.agreement,cipherblockDgst:r,blockCommitment:n.exchange.blockCommitment,secretCommitment:n.exchange.secretCommitment},s={proofType:"PoO",iss:"orig",exchange:{...o,id:await $(o)}},c={timestamp:Date.now(),notBefore:"iat",notAfter:"iat",...a},d=await U(t,s,c);return this.block={jwe:i,poo:{jws:t,payload:d.payload}},this.exchange=d.payload.exchange,d}async generatePoR(){if(await this.initialized,void 0===this.exchange||void 0===this.block.poo)throw new Error("Before computing a PoR, you have first to receive a valid cipherblock with a PoO and validate the PoO");const e={proofType:"PoR",iss:"dest",exchange:this.exchange,poo:this.block.poo.jws};return this.block.por=await q(e,this.jwkPairDest.privateJwk),this.block.por}async verifyPoP(t,i){if(await this.initialized,void 0===this.exchange||void 0===this.block.por||void 0===this.block.poo)throw new Error("Cannot verify a PoP if not even a PoR have been created");const r={proofType:"PoP",iss:"orig",exchange:this.exchange,por:this.block.por.jws,secret:"",verificationCode:""},n={timestamp:Date.now(),notBefore:"iat",notAfter:1e3*this.block.poo.payload.iat+this.exchange.pooToPopDelay,...i},o=await U(t,r,n),s=JSON.parse(o.payload.secret);return this.block.secret={hex:a(e.decode(s.k)),jwk:s},this.block.pop={jws:t,payload:o.payload},o}async getSecretFromLedger(){if(await this.initialized,void 0===this.exchange||void 0===this.block.poo||void 0===this.block.por)throw new Error("Cannot get secret if a PoR has not been sent before");const e=Date.now(),t=1e3*this.block.poo.payload.iat+this.agreement.pooToSecretDelay,i=Math.round((t-e)/1e3),{hex:a,iat:r}=await this.dltAgent.getSecretFromLedger(this.agreement.ledgerSignerAddress,this.exchange.id,i);this.block.secret=await N(this.exchange.encAlg,a);try{C(1e3*r,1e3*this.block.por.payload.iat,1e3*this.block.poo.payload.iat+this.exchange.pooToSecretDelay)}catch(e){throw new v(`Although the secret has been obtained (and you could try to decrypt the cipherblock), it's been published later than agreed: ${new Date(1e3*r).toUTCString()} > ${new Date(1e3*this.block.poo.payload.iat+this.agreement.pooToSecretDelay).toUTCString()}`,["secret not published in time"])}return this.block.secret}async decrypt(){if(await this.initialized,void 0===this.exchange)throw new Error("No agreed exchange");if(void 0===this.block.secret?.jwk)throw new Error("Cannot decrypt without the secret");if(void 0===this.block.jwe)throw new Error("No cipherblock to decrypt");const t=(await E(this.block.jwe,this.block.secret.jwk)).plaintext;if(e.encode(await _(t,this.agreement.hashAlg),!0,!1)!==this.exchange.blockCommitment)throw new Error("Decrypted block does not meet the committed one");return this.block.raw=t,t}async generateVerificationRequest(){if(await this.initialized,void 0===this.block.por||void 0===this.exchange)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange");return await V("dest",this.exchange.id,this.block.por.jws,this.jwkPairDest.privateJwk)}async generateDisputeRequest(){if(await this.initialized,void 0===this.block.por||void 0===this.block.jwe||void 0===this.exchange)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange and have received the cipherblock");const e={proofType:"request",iss:"dest",por:this.block.por.jws,type:"disputeRequest",cipherblock:this.block.jwe,iat:Math.floor(Date.now()/1e3),dataExchangeId:this.exchange.id},t=await P(this.jwkPairDest.privateJwk);try{return await new g(e).setProtectedHeader({alg:this.jwkPairDest.privateJwk.alg}).setIssuedAt(e.iat).sign(t)}catch(e){throw new v(e,["unexpected error"])}}},NonRepudiationOrig:class{constructor(e,t,i,a){this.jwkPairOrig={privateJwk:t,publicJwk:JSON.parse(e.orig)},this.publicJwkDest=JSON.parse(e.dest),this.block={raw:i},this.initialized=new Promise(((t,i)=>{this.init(e,a).then((()=>{t(!0)})).catch((e=>{i(e)}))}))}async init(t,a){await M(t),this.agreement=t,await O(this.jwkPairOrig.publicJwk,this.jwkPairOrig.privateJwk);const r=await N(this.agreement.encAlg);this.block={...this.block,secret:r,jwe:await A(this.block.raw,r.jwk,this.agreement.encAlg)};const n=e.encode(await _(this.block.jwe,this.agreement.hashAlg),!0,!1),o=e.encode(await _(this.block.raw,this.agreement.hashAlg),!0,!1),s=e.encode(await _(new Uint8Array(i(this.block.secret.hex)),this.agreement.hashAlg),!0,!1),c={...this.agreement,cipherblockDgst:n,blockCommitment:o,secretCommitment:s},d=await $(c);this.exchange={...c,id:d},await this._dltSetup(a)}async _dltSetup(e){this.dltAgent=e;const t=await this.dltAgent.getAddress();if(t!==this.exchange.ledgerSignerAddress)throw new Error(`ledgerSignerAddress: ${this.exchange.ledgerSignerAddress} does not meet the address ${t} derived from the provided private key`);const i=await this.dltAgent.getContractAddress();if(i!==T(this.agreement.ledgerContractAddress,!0))throw new Error(`Contract address in use ${i} does not meet the agreed one ${this.agreement.ledgerContractAddress}`)}async generatePoO(){return await this.initialized,this.block.poo=await q({proofType:"PoO",iss:"orig",exchange:this.exchange},this.jwkPairOrig.privateJwk),this.block.poo}async verifyPoR(e,t){if(await this.initialized,void 0===this.block.poo)throw new Error("Cannot verify a PoR if not even a PoO have been created");const i={proofType:"PoR",iss:"dest",exchange:this.exchange,poo:this.block.poo.jws},a=1e3*this.block.poo.payload.iat,r={timestamp:Date.now(),notBefore:a,notAfter:a+this.exchange.pooToPorDelay,...t},n=await U(e,i,r);return this.block.por={jws:e,payload:n.payload},this.block.por}async generatePoP(){if(await this.initialized,void 0===this.block.por)throw new Error("Before computing a PoP, you have first to have received and verified the PoR");const e=await this.dltAgent.deploySecret(this.block.secret.hex,this.exchange.id),t={proofType:"PoP",iss:"orig",exchange:this.exchange,por:this.block.por.jws,secret:JSON.stringify(this.block.secret.jwk),verificationCode:e};return this.block.pop=await q(t,this.jwkPairOrig.privateJwk),this.block.pop}async generateVerificationRequest(){if(await this.initialized,void 0===this.block.por)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange");return await V("orig",this.exchange.id,this.block.por.jws,this.jwkPairOrig.privateJwk)}}});export{K as ConflictResolution,H as ENC_ALGS,te as EthersIoAgentDest,oe as EthersIoAgentOrig,I as HASH_ALGS,ne as I3mServerWalletAgentDest,ce as I3mServerWalletAgentOrig,ae as I3mWalletAgentDest,se as I3mWalletAgentOrig,fe as NonRepudiationProtocol,v as NrError,z as SIGNING_ALGS,de as Signers,C as checkTimestamp,q as createProof,Z as defaultDltConfig,$ as exchangeId,x as generateKeys,D as getDltAddress,P as importJwk,J as jsonSort,E as jweDecrypt,A as jweEncrypt,S as jwsDecode,N as oneTimeSecret,R as parseAddress,T as parseHex,j as parseJwk,_ as sha,M as validateAgreement,O as verifyKeyPair,U as verifyProof};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
