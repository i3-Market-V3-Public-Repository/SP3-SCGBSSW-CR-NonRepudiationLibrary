"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@juanelas/base64"),t=require("bigint-conversion"),i=require("bigint-crypto-utils"),a=require("elliptic"),r=require("jose"),n=require("object-sha"),o=require("ethers"),s=require("ethers/lib/utils");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function d(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(i){if("default"!==i){var a=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(t,i,a.get?a:{enumerable:!0,get:function(){return e[i]}})}})),t.default=e,Object.freeze(t)}var f=d(e),h=c(a);class l extends Error{constructor(e,t){super(e),e instanceof l?(this.nrErrors=e.nrErrors,this.add(...t)):this.nrErrors=t}add(...e){e.forEach((e=>this.nrErrors.push(e)))}}const{ec:p}=h.default;async function g(e,t){try{return await r.importJWK(e,t)}catch(e){throw new l(e,["invalid key"])}}async function w(e,t,i){const a=await g(t);let n;try{return n=await new r.CompactEncrypt(e).setProtectedHeader({alg:"dir",enc:i,kid:t.kid}).encrypt(a),n}catch(e){throw new l(e,["encryption failed"])}}async function u(e,t,i="A256GCM"){const a=await g(t);try{return await r.compactDecrypt(e,a,{contentEncryptionAlgorithms:[i]})}catch(e){throw new l(e,["decryption failed"])}}async function b(e,t){const i=e.match(/^([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)$/);if(null===i)throw new l(new Error(`${e} is not a JWS`),["not a compact jws"]);let a,n;try{a=JSON.parse(f.decode(i[1],!0)),n=JSON.parse(f.decode(i[2],!0))}catch(e){throw new l(e,["invalid format","not a compact jws"])}if(void 0!==t){const i="function"==typeof t?await t(a,n):t,o=await g(i);try{const t=await r.jwtVerify(e,o);return{header:t.protectedHeader,payload:t.payload,signer:i}}catch(e){throw new l(e,["jws verification failed"])}}return{header:a,payload:n}}function y(e,t,i,a=2e3){if(e<t-a)throw new l(new Error(`timestamp ${new Date(e).toTimeString()} before 'notBefore' ${new Date(t).toTimeString()} with tolerance of ${a/1e3}s`),["invalid timestamp"]);if(e>i+a)throw new l(new Error(`timestamp ${new Date(e).toTimeString()} after 'notAfter' ${new Date(i).toTimeString()} with tolerance of ${a/1e3}s`),["invalid timestamp"])}function m(e){return Array.isArray(e)?e.sort().map(m):(t=e,"[object Object]"===Object.prototype.toString.call(t)?Object.keys(e).sort().reduce((function(t,i){return t[i]=m(e[i]),t}),{}):e);var t}function v(e,t=!1,i){const a=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==a)throw new l(new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'"),["invalid format"]);let r=a[2].toLocaleLowerCase();if(void 0!==i){if(i<r.length/2)throw new l(new RangeError(`expected byte length ${i} < input hex byte length ${Math.ceil(r.length/2)}`),["invalid format"]);r=r.padStart(2*i,"0")}return t?"0x"+r:r}async function x(e,t){try{await g(e,e.alg);const i=m(e);return t?JSON.stringify(i):i}catch(e){throw new l(e,["invalid key"])}}async function k(e,t){const i=["SHA-256","SHA-384","SHA-512"];if(!i.includes(t))throw new l(new RangeError(`Valid hash algorith values are any of ${JSON.stringify(i)}`),["invalid algorithm"]);const a=new TextEncoder,r="string"==typeof e?a.encode(e).buffer:e;try{let e;{const i=t.toLowerCase().replace("-","");e=new Uint8Array(require("crypto").createHash(i).update(Buffer.from(r)).digest())}return e}catch(e){throw new l(e,["unexpected error"])}}async function P(i,a,n){let o,s;switch(i){case"A128GCM":s=16;break;case"A256GCM":s=32;break;default:throw new l(new Error(`Invalid encAlg '${i}'. Supported values are: ${["A128GCM","A256GCM"].toString()}`),["invalid algorithm"])}if(void 0!==a){if(o="string"==typeof a?!0===n?f.decode(a):new Uint8Array(t.hexToBuf(v(a,void 0,s))):a,o.length!==s)throw new l(new RangeError(`Expected secret length ${s} does not meet provided one ${o.length}`),["invalid key"])}else try{o=await r.generateSecret(i,{extractable:!0})}catch(e){throw new l(e,["unexpected error"])}const c=await r.exportJWK(o);return c.alg=i,{jwk:c,hex:t.bufToHex(e.decode(c.k))}}async function A(e,t){if(void 0===e.alg||void 0===t.alg||e.alg!==t.alg)throw new Error("alg no present in either pubJwk or privJwk, or pubJWK.alg != privJWK.alg");const a=await g(e),n=await g(t);try{const e=await i.randBytes(16),o=await new r.GeneralSign(e).addSignature(n).setProtectedHeader({alg:t.alg}).sign();await r.generalVerify(o,a)}catch(e){throw new l(e,["unexpected error"])}}async function S(e){return f.encode(await k(n.hashable(e),"SHA-256"),!0,!1)}const E=["SHA-256","SHA-384","SHA-512"],T=["ES256","ES384","ES512"],J=["A128GCM","A256GCM"];function j(e){if(new Date(e).getTime()>0)return Number(e);throw new l(new Error("invalid timestamp"),["invalid timestamp"])}async function _(e){const t={...e},i=Object.keys(t);if(i.length<10||i.length>11)throw new l(new Error("Invalid agreeemt: "+JSON.stringify(e,void 0,2)),["invalid format"]);for(const a of i)switch(a){case"orig":case"dest":t[a]=await x(JSON.parse(e[a]),!0);break;case"ledgerContractAddress":case"ledgerSignerAddress":t[a]=v(t[a],!0);break;case"pooToPorDelay":case"pooToPopDelay":case"pooToSecretDelay":t[a]=j(t[a]);break;case"hashAlg":if(!E.includes(t[a]))throw new l(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"encAlg":if(!J.includes(t[a]))throw new l(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"signingAlg":if(!T.includes(t[a]))throw new l(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"schema":break;default:throw new l(new Error(`Property ${a} not allowed in dataAgreement`),["invalid format"])}return t}async function O(e,t){if(void 0===e.iss)throw new Error('Payload iss should be set to either "orig" or "dest"');const i=JSON.parse(e.exchange[e.iss]);await A(i,t);const a=await g(t),n=t.alg,o={...e,iat:Math.floor(Date.now()/1e3)};return{jws:await new r.SignJWT(o).setProtectedHeader({alg:n}).setIssuedAt(o.iat).sign(a),payload:o}}async function C(e,t,i){const a=JSON.parse(t.exchange[t.iss]),r=await b(e,a);if(void 0===r.payload.iss)throw new Error('Property "iss" missing');if(void 0===r.payload.iat)throw new Error("Property claim iat missing");if(void 0!==i){y("iat"===i.timestamp?1e3*r.payload.iat:i.timestamp,"iat"===i.notBefore?1e3*r.payload.iat:i.notBefore,"iat"===i.notAfter?1e3*r.payload.iat:i.notAfter,i.tolerance)}const o=r.payload,s=o.exchange[o.iss];if(n.hashable(a)!==n.hashable(JSON.parse(s)))throw new Error(`The proof is issued by ${s} instead of ${JSON.stringify(a)}`);const c=t;for(const e in c){if(void 0===o[e])throw new Error(`Expected key '${e}' not found in proof`);if("exchange"===e){const e=t.exchange;N(o.exchange,e)}else if(""!==c[e]&&n.hashable(c[e])!==n.hashable(o[e]))throw new Error(`Proof's ${e}: ${JSON.stringify(o[e],void 0,2)} does not meet provided value ${JSON.stringify(c[e],void 0,2)}`)}return r}function N(e,t){const i=["id","orig","dest","hashAlg","cipherblockDgst","blockCommitment","blockCommitment","secretCommitment","schema"];for(const t of i)if("schema"!==t&&(void 0===e[t]||""===e[t]))throw new Error(`${t} is missing on dataExchange.\ndataExchange: ${JSON.stringify(e,void 0,2)}`);for(const i in t)if(""!==t[i]&&n.hashable(t[i])!==n.hashable(e[i]))throw new Error(`dataExchange's ${i}: ${JSON.stringify(e[i],void 0,2)} does not meet expected value ${JSON.stringify(t[i],void 0,2)}`)}async function D(e,t,i=10){const{payload:a}=await b(e),r=a.exchange,n={...r};delete n.id;if(await S(n)!==r.id)throw new l(new Error("data exchange integrity failed"),["dataExchange integrity violated"]);const o=JSON.parse(r.dest),s=JSON.parse(r.orig);let c,d,f;try{c=(await C(a.poo,{iss:"orig",proofType:"PoO",exchange:r})).payload}catch(e){throw new l(e,["invalid poo"])}try{await C(e,{iss:"dest",proofType:"PoR",exchange:r},{timestamp:"iat",notBefore:1e3*c.iat,notAfter:1e3*c.iat+r.pooToPorDelay})}catch(e){throw new l(e,["invalid por"])}try{const e=await t.getSecretFromLedger(r.ledgerSignerAddress,r.id,i);d=e.hex,f=e.iat}catch(e){throw new l(e,["cannot verify"])}try{y(1e3*f,1e3*a.iat,1e3*c.iat+r.pooToSecretDelay)}catch(e){throw new l(`Although the secret has been obtained (and you could try to decrypt the cipherblock), it's been published later than agreed: ${new Date(1e3*f).toUTCString()} > ${new Date(1e3*c.iat+r.pooToSecretDelay).toUTCString()}`,["secret not published in time"])}return{pooPayload:c,porPayload:a,secretHex:d,destPublicJwk:o,origPublicJwk:s}}async function R(e,t,i=10){let a,r,n,o,s;try{a=(await b(e)).payload}catch(e){throw new l(e,["invalid verification request"])}try{const e=await D(a.por,t,i);r=e.destPublicJwk,n=e.origPublicJwk,o=e.pooPayload,s=e.porPayload}catch(e){throw new l(e,["invalid por","invalid verification request"])}try{await b(e,"dest"===a.iss?r:n)}catch(e){throw new l(e,["invalid verification request"])}return{pooPayload:o,porPayload:s,vrPayload:a,destPublicJwk:r,origPublicJwk:n}}async function I(e,t){const{payload:i}=await b(e),{destPublicJwk:a,origPublicJwk:r,secretHex:n,pooPayload:o,porPayload:s}=await D(i.por,t);try{await b(e,a)}catch(e){throw e instanceof l&&e.add("invalid dispute request"),e}if(f.encode(await k(i.cipherblock,s.exchange.hashAlg),!0,!1)!==s.exchange.cipherblockDgst)throw new l(new Error("cipherblock does not meet the committed (and already accepted) one"),["invalid dispute request"]);return await u(i.cipherblock,(await P(s.exchange.encAlg,n)).jwk),{pooPayload:o,porPayload:s,drPayload:i,destPublicJwk:a,origPublicJwk:r}}async function $(e,t,i,a){const n={proofType:"request",iss:e,dataExchangeId:t,por:i,type:"verificationRequest",iat:Math.floor(Date.now()/1e3)},o=await r.importJWK(a);return await new r.SignJWT(n).setProtectedHeader({alg:a.alg}).setIssuedAt(n.iat).sign(o)}var B=Object.freeze({__proto__:null,checkCompleteness:R,checkDecryption:I,ConflictResolver:class{constructor(e,t){this.jwkPair=e,this.dltAgent=t,this.initialized=new Promise(((e,t)=>{this.init().then((()=>{e(!0)})).catch((e=>{t(e)}))}))}async init(){await A(this.jwkPair.publicJwk,this.jwkPair.privateJwk)}async resolveCompleteness(e){await this.initialized;const{payload:t}=await b(e);let i;try{i=(await b(t.por)).payload}catch(e){throw new l(e,["invalid por"])}const a={...await this._resolution(t.dataExchangeId,i.exchange[t.iss]),resolution:"not completed",type:"verification"};try{await R(e,this.dltAgent),a.resolution="completed"}catch(e){if(!(e instanceof l)||e.nrErrors.includes("invalid verification request")||e.nrErrors.includes("unexpected error"))throw e}const n=await r.importJWK(this.jwkPair.privateJwk);return await new r.SignJWT(a).setProtectedHeader({alg:this.jwkPair.privateJwk.alg}).setIssuedAt(a.iat).sign(n)}async resolveDispute(e){await this.initialized;const{payload:t}=await b(e);let i;try{i=(await b(t.por)).payload}catch(e){throw new l(e,["invalid por"])}const a={...await this._resolution(t.dataExchangeId,i.exchange[t.iss]),resolution:"denied",type:"dispute"};try{await I(e,this.dltAgent)}catch(e){if(!(e instanceof l&&e.nrErrors.includes("decryption failed")))throw new l(e,["cannot verify"]);a.resolution="accepted"}const n=await r.importJWK(this.jwkPair.privateJwk);return await new r.SignJWT(a).setProtectedHeader({alg:this.jwkPair.privateJwk.alg}).setIssuedAt(a.iat).sign(n)}async _resolution(e,t){return{proofType:"resolution",dataExchangeId:e,iat:Math.floor(Date.now()/1e3),iss:await x(this.jwkPair.publicJwk,!0),sub:t}}},generateVerificationRequest:$,verifyPor:D,verifyResolution:async function(e,t){return await b(e,t??((e,t)=>JSON.parse(t.iss)))}});const H={gasLimit:125e5,contract:{address:"0x8d407A1722633bDD1dcf221474be7a44C05d7c2F",abi:[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"dataExchangeId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"},{indexed:!1,internalType:"uint256",name:"secret",type:"uint256"}],name:"Registration",type:"event"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"registry",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"secret",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_dataExchangeId",type:"uint256"},{internalType:"uint256",name:"_secret",type:"uint256"}],name:"setRegistry",outputs:[],stateMutability:"nonpayable",type:"function"}],transactionHash:"0x6a3828f8fe232819dc40ca66f93930b3bd1619db31a67ec34b44446b3e7c8289",receipt:{to:null,from:"0x17bd12C2134AfC1f6E9302a532eFE30C19B9E903",contractAddress:"0x8d407A1722633bDD1dcf221474be7a44C05d7c2F",transactionIndex:0,gasUsed:"253928",logsBloom:"0xblockHash:"0x0118672bb9b27679e616831d056d36291dd20cfe88c3ee2abd8f2dfce579cad4",transactionHash:"0x6a3828f8fe232819dc40ca66f93930b3bd1619db31a67ec34b44446b3e7c8289",logs:[],blockNumber:119389,cumulativeGasUsed:"253928",status:1,byzantium:!0},args:[],solcInputHash:"c528a37588793ef74285d75e08d6b8eb",metadata:'{"compiler":{"version":"0.8.4+commit.c7e474f2"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"dataExchangeId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"secret","type":"uint256"}],"name":"Registration","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"registry","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"secret","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dataExchangeId","type":"uint256"},{"internalType":"uint256","name":"_secret","type":"uint256"}],"name":"setRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/NonRepudiation.sol":"NonRepudiation"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/NonRepudiation.sol":{"content":"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract NonRepudiation {\\n    struct Proof {\\n        uint256 timestamp;\\n        uint256 secret;\\n    }\\n    mapping(address => mapping (uint256 => Proof)) public registry;\\n    event Registration(address sender, uint256 dataExchangeId, uint256 timestamp, uint256 secret);\\n\\n    function setRegistry(uint256 _dataExchangeId, uint256 _secret) public {\\n        require(registry[msg.sender][_dataExchangeId].secret == 0);\\n        registry[msg.sender][_dataExchangeId] = Proof(block.timestamp, _secret);\\n        emit Registration(msg.sender, _dataExchangeId, block.timestamp, _secret);\\n    }\\n}\\n","keccak256":"0x8d371257a9b03c9102f158323e61f56ce49dd8489bd92c5a7d8abc3d9f6f8399","license":"Unlicense"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506103a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063032439371461003b578063d05cb54514610057575b600080fd5b6100556004803603810190610050919061023a565b610088565b005b610071600480360381019061006c91906101fe565b6101a3565b60405161007f9291906102d9565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010154146100e757600080fd5b6040518060400160405280428152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000155602082015181600101559050507faa58599838af2e5e0f3251cfbb4eac5d5d447ded49f6b0ac28d6b44098224e63338342846040516101979493929190610294565b60405180910390a15050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000813590506101e38161033e565b92915050565b6000813590506101f881610355565b92915050565b6000806040838503121561021157600080fd5b600061021f858286016101d4565b9250506020610230858286016101e9565b9150509250929050565b6000806040838503121561024d57600080fd5b600061025b858286016101e9565b925050602061026c858286016101e9565b9150509250929050565b61027f81610302565b82525050565b61028e81610334565b82525050565b60006080820190506102a96000830187610276565b6102b66020830186610285565b6102c36040830185610285565b6102d06060830184610285565b95945050505050565b60006040820190506102ee6000830185610285565b6102fb6020830184610285565b9392505050565b600061030d82610314565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61034781610302565b811461035257600080fd5b50565b61035e81610334565b811461036957600080fd5b5056fea26469706673582212204fd0fc653fb487221da9a14a4ca5d5499f9e9bc7b27ac8ab0f8d397fd6e3148564736f6c63430008040033",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063032439371461003b578063d05cb54514610057575b600080fd5b6100556004803603810190610050919061023a565b610088565b005b610071600480360381019061006c91906101fe565b6101a3565b60405161007f9291906102d9565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010154146100e757600080fd5b6040518060400160405280428152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000155602082015181600101559050507faa58599838af2e5e0f3251cfbb4eac5d5d447ded49f6b0ac28d6b44098224e63338342846040516101979493929190610294565b60405180910390a15050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000813590506101e38161033e565b92915050565b6000813590506101f881610355565b92915050565b6000806040838503121561021157600080fd5b600061021f858286016101d4565b9250506020610230858286016101e9565b9150509250929050565b6000806040838503121561024d57600080fd5b600061025b858286016101e9565b925050602061026c858286016101e9565b9150509250929050565b61027f81610302565b82525050565b61028e81610334565b82525050565b60006080820190506102a96000830187610276565b6102b66020830186610285565b6102c36040830185610285565b6102d06060830184610285565b95945050505050565b60006040820190506102ee6000830185610285565b6102fb6020830184610285565b9392505050565b600061030d82610314565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61034781610302565b811461035257600080fd5b50565b61035e81610334565b811461036957600080fd5b5056fea26469706673582212204fd0fc653fb487221da9a14a4ca5d5499f9e9bc7b27ac8ab0f8d397fd6e3148564736f6c63430008040033",devdoc:{kind:"dev",methods:{},version:1},userdoc:{kind:"user",methods:{},version:1},storageLayout:{storage:[{astId:13,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"registry",offset:0,slot:"0",type:"t_mapping(t_address,t_mapping(t_uint256,t_struct(Proof)6_storage))"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(Proof)6_storage))":{encoding:"mapping",key:"t_address",label:"mapping(address => mapping(uint256 => struct NonRepudiation.Proof))",numberOfBytes:"32",value:"t_mapping(t_uint256,t_struct(Proof)6_storage)"},"t_mapping(t_uint256,t_struct(Proof)6_storage)":{encoding:"mapping",key:"t_uint256",label:"mapping(uint256 => struct NonRepudiation.Proof)",numberOfBytes:"32",value:"t_struct(Proof)6_storage"},"t_struct(Proof)6_storage":{encoding:"inplace",label:"struct NonRepudiation.Proof",members:[{astId:3,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"timestamp",offset:0,slot:"0",type:"t_uint256"},{astId:5,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"secret",offset:0,slot:"1",type:"t_uint256"}],numberOfBytes:"64"},t_uint256:{encoding:"inplace",label:"uint256",numberOfBytes:"32"}}}}};class q{}class z extends q{constructor(e){super(),this.dltConfig={...H,...e},this.provider=new o.ethers.providers.JsonRpcProvider(this.dltConfig.rpcProviderUrl),this.contract=new o.ethers.Contract(this.dltConfig.contract.address,this.dltConfig.contract.abi,this.provider)}async getContractAddress(){return this.contract.address}}class L extends z{async getSecretFromLedger(e,i,a){let r=o.ethers.BigNumber.from(0),n=o.ethers.BigNumber.from(0);const s=v(t.bufToHex(f.decode(i)),!0);let c=0;do{try{({secret:r,timestamp:n}=await this.contract.registry(v(e,!0),s))}catch(e){throw new l(e,["cannot contact the ledger"])}r.isZero()&&(c++,await new Promise((e=>setTimeout(e,1e3))))}while(r.isZero()&&c<a);if(r.isZero())throw new l(new Error(`timeout of ${a}s exceeded when querying the ledger and secret still not published`),["secret not published"]);return{hex:v(r.toHexString(),!1),iat:n.toNumber()}}}class W extends L{}class M extends L{}class G extends z{constructor(e,a){let r;super(e),this.count=-1,r=void 0===a?i.randBytesSync(32):"string"==typeof a?new Uint8Array(t.hexToBuf(a)):a;const n=new s.SigningKey(r);this.signer=new o.Wallet(n,this.provider)}async deploySecret(e,i){const a=o.ethers.BigNumber.from(v(e,!0)),r=v(t.bufToHex(f.decode(i)),!0),n=await this.contract.populateTransaction.setRegistry(r,a,{gasLimit:this.dltConfig.gasLimit});n.nonce=await this.nextNonce(),n.gasPrice=await this.signer.provider.getGasPrice(),n.chainId=(await this.signer.provider.getNetwork()).chainId;const s=await this.signer.signTransaction(n),c=await this.signer.provider.sendTransaction(s);return this.count=this.count+1,c.hash}async getAddress(){return this.signer.address}async nextNonce(){const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}class U extends z{constructor(e,t,i){super(i),this.session=e,this.did=t}}class K extends U{constructor(){super(...arguments),this.count=-1}async deploySecret(e,i){const a=o.ethers.BigNumber.from(v(e,!0)),r=v(t.bufToHex(f.decode(i)),!0),n=await this.contract.populateTransaction.setRegistry(r,a,{gasLimit:this.dltConfig.gasLimit});n.nonce=await this.nextNonce(),n.gasLimit=n.gasLimit?._hex,n.gasPrice=(await this.provider.getGasPrice())._hex,n.chainId=(await this.provider.getNetwork()).chainId;const s=await this.getAddress();n.from=v(s,!0);const c=await this.session.send({url:`/identities/${this.did}/sign`,init:{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"Transaction",data:n})}});if(200!==c.status)throw new Error(c.body);const d=JSON.parse(c.body).signature,h=await this.provider.sendTransaction(d);return this.count=this.count+1,h.hash}async getAddress(){const e=await this.session.send({url:`/identities/${this.did}/info`,init:{method:"GET"}});return JSON.parse(e.body).addresses[0]}async nextNonce(){const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}class V extends z{constructor(e,t,i){super({...i,rpcProviderUrl:e.providersData[e.provider].rpcUrl}),this.wallet=e,this.did=t}}class F extends V{constructor(){super(...arguments),this.count=-1}async deploySecret(e,i){const a=o.ethers.BigNumber.from(v(e,!0)),r=v(t.bufToHex(f.decode(i)),!0),n=await this.contract.populateTransaction.setRegistry(r,a,{gasLimit:this.dltConfig.gasLimit});n.nonce=await this.nextNonce(),n.gasLimit=n.gasLimit?._hex,n.gasPrice=(await this.provider.getGasPrice())._hex,n.chainId=(await this.provider.getNetwork()).chainId;const s=await this.getAddress();n.from=v(s,!0);const c=(await this.wallet.identitySign({did:this.did},{type:"Transaction",data:n})).signature,d=await this.provider.sendTransaction(c);return this.count=this.count+1,d.hash}async getAddress(){const e=await this.wallet.identityInfo({did:this.did});if(void 0===e.addresses)throw new l(`Can't get address for did: ${this.did}`,["unexpected error"]);return e.addresses[0]}async nextNonce(){const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}var Z=Object.freeze({__proto__:null,EthersIoAgentDest:L,I3mWalletAgentDest:W,I3mServerWalletAgentDest:M,EthersIoAgentOrig:G,I3mWalletAgentOrig:K,I3mServerWalletAgentOrig:F});var X=Object.freeze({__proto__:null,NonRepudiationDest:class{constructor(e,t,i){this.initialized=new Promise(((a,r)=>{this.asyncConstructor(e,t,i).then((()=>{a(!0)})).catch((e=>{r(e)}))}))}async asyncConstructor(e,t,i){this.agreement=await _(e),this.jwkPairDest={privateJwk:t,publicJwk:JSON.parse(e.dest)},this.publicJwkOrig=JSON.parse(e.orig),await A(this.jwkPairDest.publicJwk,this.jwkPairDest.privateJwk),this.dltAgent=i;const a=v(await this.dltAgent.getContractAddress(),!0);if(this.agreement.ledgerContractAddress!==a)throw new Error(`Contract address ${a} does not meet agreed one ${this.agreement.ledgerContractAddress}`);this.block={}}async verifyPoO(e,t,i){await this.initialized;const a=f.encode(await k(t,this.agreement.hashAlg),!0,!1),{payload:r}=await b(e),n={...this.agreement,cipherblockDgst:a,blockCommitment:r.exchange.blockCommitment,secretCommitment:r.exchange.secretCommitment},o={proofType:"PoO",iss:"orig",exchange:{...n,id:await S(n)}},s={timestamp:Date.now(),notBefore:"iat",notAfter:"iat",...i},c=await C(e,o,s);return this.block={jwe:t,poo:{jws:e,payload:c.payload}},this.exchange=c.payload.exchange,c}async generatePoR(){if(await this.initialized,void 0===this.exchange||void 0===this.block.poo)throw new Error("Before computing a PoR, you have first to receive a valid cipherblock with a PoO and validate the PoO");const e={proofType:"PoR",iss:"dest",exchange:this.exchange,poo:this.block.poo.jws};return this.block.por=await O(e,this.jwkPairDest.privateJwk),this.block.por}async verifyPoP(e,i){if(await this.initialized,void 0===this.exchange||void 0===this.block.por||void 0===this.block.poo)throw new Error("Cannot verify a PoP if not even a PoR have been created");const a={proofType:"PoP",iss:"orig",exchange:this.exchange,por:this.block.por.jws,secret:"",verificationCode:""},r={timestamp:Date.now(),notBefore:"iat",notAfter:1e3*this.block.poo.payload.iat+this.exchange.pooToPopDelay,...i},n=await C(e,a,r),o=JSON.parse(n.payload.secret);return this.block.secret={hex:t.bufToHex(f.decode(o.k)),jwk:o},this.block.pop={jws:e,payload:n.payload},n}async getSecretFromLedger(){if(await this.initialized,void 0===this.exchange||void 0===this.block.poo||void 0===this.block.por)throw new Error("Cannot get secret if a PoR has not been sent before");const e=Date.now(),t=1e3*this.block.poo.payload.iat+this.agreement.pooToSecretDelay,i=Math.round((t-e)/1e3),{hex:a,iat:r}=await this.dltAgent.getSecretFromLedger(this.agreement.ledgerSignerAddress,this.exchange.id,i);this.block.secret=await P(this.exchange.encAlg,a);try{y(1e3*r,1e3*this.block.por.payload.iat,1e3*this.block.poo.payload.iat+this.exchange.pooToSecretDelay)}catch(e){throw new l(`Although the secret has been obtained (and you could try to decrypt the cipherblock), it's been published later than agreed: ${new Date(1e3*r).toUTCString()} > ${new Date(1e3*this.block.poo.payload.iat+this.agreement.pooToSecretDelay).toUTCString()}`,["secret not published in time"])}return this.block.secret}async decrypt(){if(await this.initialized,void 0===this.exchange)throw new Error("No agreed exchange");if(void 0===this.block.secret?.jwk)throw new Error("Cannot decrypt without the secret");if(void 0===this.block.jwe)throw new Error("No cipherblock to decrypt");const e=(await u(this.block.jwe,this.block.secret.jwk)).plaintext;if(f.encode(await k(e,this.agreement.hashAlg),!0,!1)!==this.exchange.blockCommitment)throw new Error("Decrypted block does not meet the committed one");return this.block.raw=e,e}async generateVerificationRequest(){if(await this.initialized,void 0===this.block.por||void 0===this.exchange)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange");return await $("dest",this.exchange.id,this.block.por.jws,this.jwkPairDest.privateJwk)}async generateDisputeRequest(){if(await this.initialized,void 0===this.block.por||void 0===this.block.jwe||void 0===this.exchange)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange and have received the cipherblock");const e={proofType:"request",iss:"dest",por:this.block.por.jws,type:"disputeRequest",cipherblock:this.block.jwe,iat:Math.floor(Date.now()/1e3),dataExchangeId:this.exchange.id},t=await g(this.jwkPairDest.privateJwk);try{return await new r.SignJWT(e).setProtectedHeader({alg:this.jwkPairDest.privateJwk.alg}).setIssuedAt(e.iat).sign(t)}catch(e){throw new l(e,["unexpected error"])}}},NonRepudiationOrig:class{constructor(e,t,i,a){this.jwkPairOrig={privateJwk:t,publicJwk:JSON.parse(e.orig)},this.publicJwkDest=JSON.parse(e.dest),this.block={raw:i},this.initialized=new Promise(((t,i)=>{this.init(e,a).then((()=>{t(!0)})).catch((e=>{i(e)}))}))}async init(e,i){this.agreement=await _(e),await A(this.jwkPairOrig.publicJwk,this.jwkPairOrig.privateJwk);const a=await P(this.agreement.encAlg);this.block={...this.block,secret:a,jwe:await w(this.block.raw,a.jwk,this.agreement.encAlg)};const r=f.encode(await k(this.block.jwe,this.agreement.hashAlg),!0,!1),n=f.encode(await k(this.block.raw,this.agreement.hashAlg),!0,!1),o=f.encode(await k(new Uint8Array(t.hexToBuf(this.block.secret.hex)),this.agreement.hashAlg),!0,!1),s={...this.agreement,cipherblockDgst:r,blockCommitment:n,secretCommitment:o},c=await S(s);this.exchange={...s,id:c},await this._dltSetup(i)}async _dltSetup(e){this.dltAgent=e;const t=v(await this.dltAgent.getAddress(),!0);if(t!==this.exchange.ledgerSignerAddress)throw new Error(`ledgerSignerAddress: ${this.exchange.ledgerSignerAddress} does not meet the address ${t} derived from the provided private key`);const i=v(await this.dltAgent.getContractAddress(),!0);if(i!==v(this.agreement.ledgerContractAddress,!0))throw new Error(`Contract address in use ${i} does not meet the agreed one ${this.agreement.ledgerContractAddress}`)}async generatePoO(){return await this.initialized,this.block.poo=await O({proofType:"PoO",iss:"orig",exchange:this.exchange},this.jwkPairOrig.privateJwk),this.block.poo}async verifyPoR(e,t){if(await this.initialized,void 0===this.block.poo)throw new Error("Cannot verify a PoR if not even a PoO have been created");const i={proofType:"PoR",iss:"dest",exchange:this.exchange,poo:this.block.poo.jws},a=1e3*this.block.poo.payload.iat,r={timestamp:Date.now(),notBefore:a,notAfter:a+this.exchange.pooToPorDelay,...t},n=await C(e,i,r);return this.block.por={jws:e,payload:n.payload},this.block.por}async generatePoP(){if(await this.initialized,void 0===this.block.por)throw new Error("Before computing a PoP, you have first to have received and verified the PoR");const e=await this.dltAgent.deploySecret(this.block.secret.hex,this.exchange.id),t={proofType:"PoP",iss:"orig",exchange:this.exchange,por:this.block.por.jws,secret:JSON.stringify(this.block.secret.jwk),verificationCode:e};return this.block.pop=await O(t,this.jwkPairOrig.privateJwk),this.block.pop}async generateVerificationRequest(){if(await this.initialized,void 0===this.block.por)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange");return await $("orig",this.exchange.id,this.block.por.jws,this.jwkPairOrig.privateJwk)}}});exports.ConflictResolution=B,exports.ENC_ALGS=J,exports.EthersIoAgentDest=L,exports.EthersIoAgentOrig=G,exports.HASH_ALGS=E,exports.I3mServerWalletAgentDest=M,exports.I3mServerWalletAgentOrig=F,exports.I3mWalletAgentDest=W,exports.I3mWalletAgentOrig=K,exports.NonRepudiationProtocol=X,exports.NrError=l,exports.SIGNING_ALGS=T,exports.Signers=Z,exports.checkTimestamp=y,exports.createProof=O,exports.defaultDltConfig=H,exports.exchangeId=S,exports.generateKeys=async function(e,a,r){const n=["ES256","ES384","ES512"];if(!n.includes(e))throw new l(new RangeError(`Invalid signature algorithm '${e}''. Allowed algorithms are ${n.toString()}`),["invalid algorithm"]);let o,s,c;switch(e){case"ES512":s="P-521",o=66;break;case"ES384":s="P-384",o=48;break;default:s="P-256",o=32}c=void 0!==a?"string"==typeof a?!0===r?f.decode(a):new Uint8Array(t.hexToBuf(a)):a:new Uint8Array(await i.randBytes(o));const d=new p("p"+s.substring(s.length-3)).keyFromPrivate(c),h=d.getPublic(),g=h.getX().toString("hex").padStart(2*o,"0"),w=h.getY().toString("hex").padStart(2*o,"0"),u=d.getPrivate("hex").padStart(2*o,"0"),b={kty:"EC",crv:s,x:f.encode(t.hexToBuf(g),!0,!1),y:f.encode(t.hexToBuf(w),!0,!1),d:f.encode(t.hexToBuf(u),!0,!1),alg:e},y={...b};return delete y.d,{publicJwk:y,privateJwk:b}},exports.importJwk=g,exports.jsonSort=m,exports.jweDecrypt=u,exports.jweEncrypt=w,exports.jwsDecode=b,exports.oneTimeSecret=P,exports.parseAgreement=_,exports.parseHex=v,exports.parseJwk=x,exports.sha=k,exports.verifyKeyPair=A,exports.verifyProof=C;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
