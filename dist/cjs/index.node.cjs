"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@juanelas/base64"),t=require("bigint-conversion"),i=require("bigint-crypto-utils"),a=require("elliptic"),r=require("jose"),n=require("ethers"),o=require("object-sha"),s=require("ethers/lib/utils");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function d(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(i){if("default"!==i){var a=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(t,i,a.get?a:{enumerable:!0,get:function(){return e[i]}})}})),t.default=e,Object.freeze(t)}var f=d(e),l=c(a);class h extends Error{constructor(e,t){super(e),e instanceof h?(this.nrErrors=e.nrErrors,this.add(...t)):this.nrErrors=t}add(...e){e.forEach((e=>this.nrErrors.push(e)))}}const{ec:p}=l.default;async function g(e,t){try{return await r.importJWK(e,t)}catch(e){throw new h(e,["invalid key"])}}async function w(e,t,i){let a;const n={...t};if("A128GCM"===t.alg||"A256GCM"===t.alg)a="dir";else{if("ES256"!==t.alg&&"ES384"!==t.alg&&"ES512"!==t.alg)throw new h(`Not a valid symmetric or assymetric alg: ${t.alg}`,["encryption failed","invalid key","invalid algorithm"]);a="ECDH-ES",n.alg=a}const o=await g(n);let s;try{return s=await new r.CompactEncrypt(e).setProtectedHeader({alg:a,enc:i,kid:t.kid}).encrypt(o),s}catch(e){throw new h(e,["encryption failed"])}}async function u(e,t,i="A256GCM"){try{const a={...t};if("ES256"===t.alg||"ES384"===t.alg||"ES512"===t.alg)a.alg="ECDH-ES";else if("A128GCM"!==t.alg&&"A256GCM"!==t.alg)throw new h(`Not a valid symmetric or assymetric alg: ${t.alg}`,["encryption failed","invalid key","invalid algorithm"]);const n=await g(a);return await r.compactDecrypt(e,n,{contentEncryptionAlgorithms:[i]})}catch(e){throw new h(e,["decryption failed"])}}async function b(e,t){const i=e.match(/^([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)$/);if(null===i)throw new h(new Error(`${e} is not a JWS`),["not a compact jws"]);let a,n;try{a=JSON.parse(f.decode(i[1],!0)),n=JSON.parse(f.decode(i[2],!0))}catch(e){throw new h(e,["invalid format","not a compact jws"])}if(void 0!==t){const i="function"==typeof t?await t(a,n):t,o=await g(i);try{const t=await r.jwtVerify(e,o);return{header:t.protectedHeader,payload:t.payload,signer:i}}catch(e){throw new h(e,["jws verification failed"])}}return{header:a,payload:n}}function y(e,t,i,a=2e3){if(e<t-a)throw new h(new Error(`timestamp ${new Date(e).toTimeString()} before 'notBefore' ${new Date(t).toTimeString()} with tolerance of ${a/1e3}s`),["invalid timestamp"]);if(e>i+a)throw new h(new Error(`timestamp ${new Date(e).toTimeString()} after 'notAfter' ${new Date(i).toTimeString()} with tolerance of ${a/1e3}s`),["invalid timestamp"])}function m(e){return Array.isArray(e)?e.sort().map(m):(t=e,"[object Object]"===Object.prototype.toString.call(t)?Object.keys(e).sort().reduce((function(t,i){return t[i]=m(e[i]),t}),{}):e);var t}function v(e,t=!1,i){const a=e.match(/^(0x)?(([\da-fA-F][\da-fA-F])+)$/);if(null==a)throw new h(new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'"),["invalid format"]);let r=a[2];if(void 0!==i){if(i<r.length/2)throw new h(new RangeError(`expected byte length ${i} < input hex byte length ${Math.ceil(r.length/2)}`),["invalid format"]);r=r.padStart(2*i,"0")}return t?"0x"+r:r}async function x(e,t){try{await g(e,e.alg);const i=m(e);return t?JSON.stringify(i):i}catch(e){throw new h(e,["invalid key"])}}async function k(e,t){const i=["SHA-256","SHA-384","SHA-512"];if(!i.includes(t))throw new h(new RangeError(`Valid hash algorith values are any of ${JSON.stringify(i)}`),["invalid algorithm"]);const a=new TextEncoder,r="string"==typeof e?a.encode(e).buffer:e;try{let e;{const i=t.toLowerCase().replace("-","");e=new Uint8Array(require("crypto").createHash(i).update(Buffer.from(r)).digest())}return e}catch(e){throw new h(e,["unexpected error"])}}function P(e){const t=e.match(/^(0x)?([\da-fA-F]{40})$/);if(null==t)throw new RangeError("incorrect address format");const i=t[2];return n.ethers.utils.getAddress("0x"+i)}async function A(i,a,n){let o,s;switch(i){case"A128GCM":s=16;break;case"A256GCM":s=32;break;default:throw new h(new Error(`Invalid encAlg '${i}'. Supported values are: ${["A128GCM","A256GCM"].toString()}`),["invalid algorithm"])}if(void 0!==a){if(o="string"==typeof a?!0===n?f.decode(a):new Uint8Array(t.hexToBuf(v(a,void 0,s))):a,o.length!==s)throw new h(new RangeError(`Expected secret length ${s} does not meet provided one ${o.length}`),["invalid key"])}else try{o=await r.generateSecret(i,{extractable:!0})}catch(e){throw new h(e,["unexpected error"])}const c=await r.exportJWK(o);return c.alg=i,{jwk:c,hex:t.bufToHex(e.decode(c.k))}}async function S(e,t){if(void 0===e.alg||void 0===t.alg||e.alg!==t.alg)throw new Error("alg no present in either pubJwk or privJwk, or pubJWK.alg != privJWK.alg");const a=await g(e),n=await g(t);try{const e=await i.randBytes(16),o=await new r.GeneralSign(e).addSignature(n).setProtectedHeader({alg:t.alg}).sign();await r.generalVerify(o,a)}catch(e){throw new h(e,["unexpected error"])}}async function E(e){return f.encode(await k(o.hashable(e),"SHA-256"),!0,!1)}const J=["SHA-256","SHA-384","SHA-512"],T=["ES256","ES384","ES512"],C=["A128GCM","A256GCM"];function j(e){if(new Date(e).getTime()>0)return Number(e);throw new h(new Error("invalid timestamp"),["invalid timestamp"])}async function _(e){const t=Object.keys(e);if(t.length<10||t.length>11)throw new h(new Error("Invalid agreeemt: "+JSON.stringify(e,void 0,2)),["invalid format"]);for(const i of t){let t;switch(i){case"orig":case"dest":if(e[i]!==await x(JSON.parse(e[i]),!0))throw new h(`[dataExchangeAgreeement.${i}] A valid stringified JWK must be provided. For uniqueness, JWK claims must be sorted in the stringified JWK. You can use the parseJWK(jwk, true) for that purpose`,["invalid key","invalid format"]);break;case"ledgerContractAddress":case"ledgerSignerAddress":try{t=P(e[i])}catch(e){throw new h(e.message,["invalid format"])}if(e[i]!==t)throw new h(`[dataExchangeAgreeement.${i}] Invalid EIP-55 address ${e[i]}. Did you mean ${t} instead?`,["invalid format"]);break;case"pooToPorDelay":case"pooToPopDelay":case"pooToSecretDelay":if(e[i]!==j(e[i]))throw new h(`[dataExchangeAgreeement.${i}] < 0 or not a number`,["invalid format"]);break;case"hashAlg":if(!J.includes(e[i]))throw new h(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"encAlg":if(!C.includes(e[i]))throw new h(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"signingAlg":if(!T.includes(e[i]))throw new h(new Error("Invalid hash algorithm"),["invalid algorithm"]);break;case"schema":break;default:throw new h(new Error(`Property ${i} not allowed in dataAgreement`),["invalid format"])}}}async function D(e,t){if(void 0===e.iss)throw new Error('Payload iss should be set to either "orig" or "dest"');const i=JSON.parse(e.exchange[e.iss]);await S(i,t);const a=await g(t),n=t.alg,o={...e,iat:Math.floor(Date.now()/1e3)};return{jws:await new r.SignJWT(o).setProtectedHeader({alg:n}).setIssuedAt(o.iat).sign(a),payload:o}}async function O(e,t,i){const a=JSON.parse(t.exchange[t.iss]),r=await b(e,a);if(void 0===r.payload.iss)throw new Error('Property "iss" missing');if(void 0===r.payload.iat)throw new Error("Property claim iat missing");if(void 0!==i){y("iat"===i.timestamp?1e3*r.payload.iat:i.timestamp,"iat"===i.notBefore?1e3*r.payload.iat:i.notBefore,"iat"===i.notAfter?1e3*r.payload.iat:i.notAfter,i.tolerance)}const n=r.payload,s=n.exchange[n.iss];if(o.hashable(a)!==o.hashable(JSON.parse(s)))throw new Error(`The proof is issued by ${s} instead of ${JSON.stringify(a)}`);const c=t;for(const e in c){if(void 0===n[e])throw new Error(`Expected key '${e}' not found in proof`);if("exchange"===e){const e=t.exchange;R(n.exchange,e)}else if(""!==c[e]&&o.hashable(c[e])!==o.hashable(n[e]))throw new Error(`Proof's ${e}: ${JSON.stringify(n[e],void 0,2)} does not meet provided value ${JSON.stringify(c[e],void 0,2)}`)}return r}function R(e,t){const i=["id","orig","dest","hashAlg","cipherblockDgst","blockCommitment","blockCommitment","secretCommitment","schema"];for(const t of i)if("schema"!==t&&(void 0===e[t]||""===e[t]))throw new Error(`${t} is missing on dataExchange.\ndataExchange: ${JSON.stringify(e,void 0,2)}`);for(const i in t)if(""!==t[i]&&o.hashable(t[i])!==o.hashable(e[i]))throw new Error(`dataExchange's ${i}: ${JSON.stringify(e[i],void 0,2)} does not meet expected value ${JSON.stringify(t[i],void 0,2)}`)}async function N(e,t,i=10){const{payload:a}=await b(e),r=a.exchange,n={...r};delete n.id;if(await E(n)!==r.id)throw new h(new Error("data exchange integrity failed"),["dataExchange integrity violated"]);const o=JSON.parse(r.dest),s=JSON.parse(r.orig);let c,d,f;try{c=(await O(a.poo,{iss:"orig",proofType:"PoO",exchange:r})).payload}catch(e){throw new h(e,["invalid poo"])}try{await O(e,{iss:"dest",proofType:"PoR",exchange:r},{timestamp:"iat",notBefore:1e3*c.iat,notAfter:1e3*c.iat+r.pooToPorDelay})}catch(e){throw new h(e,["invalid por"])}try{const e=await t.getSecretFromLedger(r.ledgerSignerAddress,r.id,i);d=e.hex,f=e.iat}catch(e){throw new h(e,["cannot verify"])}try{y(1e3*f,1e3*a.iat,1e3*c.iat+r.pooToSecretDelay)}catch(e){throw new h(`Although the secret has been obtained (and you could try to decrypt the cipherblock), it's been published later than agreed: ${new Date(1e3*f).toUTCString()} > ${new Date(1e3*c.iat+r.pooToSecretDelay).toUTCString()}`,["secret not published in time"])}return{pooPayload:c,porPayload:a,secretHex:d,destPublicJwk:o,origPublicJwk:s}}async function I(e,t,i=10){let a,r,n,o,s;try{a=(await b(e)).payload}catch(e){throw new h(e,["invalid verification request"])}try{const e=await N(a.por,t,i);r=e.destPublicJwk,n=e.origPublicJwk,o=e.pooPayload,s=e.porPayload}catch(e){throw new h(e,["invalid por","invalid verification request"])}try{await b(e,"dest"===a.iss?r:n)}catch(e){throw new h(e,["invalid verification request"])}return{pooPayload:o,porPayload:s,vrPayload:a,destPublicJwk:r,origPublicJwk:n}}async function $(e,t){const{payload:i}=await b(e),{destPublicJwk:a,origPublicJwk:r,secretHex:n,pooPayload:o,porPayload:s}=await N(i.por,t);try{await b(e,a)}catch(e){throw e instanceof h&&e.add("invalid dispute request"),e}if(f.encode(await k(i.cipherblock,s.exchange.hashAlg),!0,!1)!==s.exchange.cipherblockDgst)throw new h(new Error("cipherblock does not meet the committed (and already accepted) one"),["invalid dispute request"]);return await u(i.cipherblock,(await A(s.exchange.encAlg,n)).jwk),{pooPayload:o,porPayload:s,drPayload:i,destPublicJwk:a,origPublicJwk:r}}async function z(e,t,i,a){const n={proofType:"request",iss:e,dataExchangeId:t,por:i,type:"verificationRequest",iat:Math.floor(Date.now()/1e3)},o=await r.importJWK(a);return await new r.SignJWT(n).setProtectedHeader({alg:a.alg}).setIssuedAt(n.iat).sign(o)}var B=Object.freeze({__proto__:null,checkCompleteness:I,checkDecryption:$,ConflictResolver:class{constructor(e,t){this.jwkPair=e,this.dltAgent=t,this.initialized=new Promise(((e,t)=>{this.init().then((()=>{e(!0)})).catch((e=>{t(e)}))}))}async init(){await S(this.jwkPair.publicJwk,this.jwkPair.privateJwk)}async resolveCompleteness(e){await this.initialized;const{payload:t}=await b(e);let i;try{i=(await b(t.por)).payload}catch(e){throw new h(e,["invalid por"])}const a={...await this._resolution(t.dataExchangeId,i.exchange[t.iss]),resolution:"not completed",type:"verification"};try{await I(e,this.dltAgent),a.resolution="completed"}catch(e){if(!(e instanceof h)||e.nrErrors.includes("invalid verification request")||e.nrErrors.includes("unexpected error"))throw e}const n=await r.importJWK(this.jwkPair.privateJwk);return await new r.SignJWT(a).setProtectedHeader({alg:this.jwkPair.privateJwk.alg}).setIssuedAt(a.iat).sign(n)}async resolveDispute(e){await this.initialized;const{payload:t}=await b(e);let i;try{i=(await b(t.por)).payload}catch(e){throw new h(e,["invalid por"])}const a={...await this._resolution(t.dataExchangeId,i.exchange[t.iss]),resolution:"denied",type:"dispute"};try{await $(e,this.dltAgent)}catch(e){if(!(e instanceof h&&e.nrErrors.includes("decryption failed")))throw new h(e,["cannot verify"]);a.resolution="accepted"}const n=await r.importJWK(this.jwkPair.privateJwk);return await new r.SignJWT(a).setProtectedHeader({alg:this.jwkPair.privateJwk.alg}).setIssuedAt(a.iat).sign(n)}async _resolution(e,t){return{proofType:"resolution",dataExchangeId:e,iat:Math.floor(Date.now()/1e3),iss:await x(this.jwkPair.publicJwk,!0),sub:t}}},generateVerificationRequest:z,verifyPor:N,verifyResolution:async function(e,t){return await b(e,t??((e,t)=>JSON.parse(t.iss)))}});const H={gasLimit:125e5,contract:{address:"0x8d407A1722633bDD1dcf221474be7a44C05d7c2F",abi:[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"dataExchangeId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"},{indexed:!1,internalType:"uint256",name:"secret",type:"uint256"}],name:"Registration",type:"event"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"registry",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"secret",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_dataExchangeId",type:"uint256"},{internalType:"uint256",name:"_secret",type:"uint256"}],name:"setRegistry",outputs:[],stateMutability:"nonpayable",type:"function"}],transactionHash:"0x6a3828f8fe232819dc40ca66f93930b3bd1619db31a67ec34b44446b3e7c8289",receipt:{to:null,from:"0x17bd12C2134AfC1f6E9302a532eFE30C19B9E903",contractAddress:"0x8d407A1722633bDD1dcf221474be7a44C05d7c2F",transactionIndex:0,gasUsed:"253928",logsBloom:"0xblockHash:"0x0118672bb9b27679e616831d056d36291dd20cfe88c3ee2abd8f2dfce579cad4",transactionHash:"0x6a3828f8fe232819dc40ca66f93930b3bd1619db31a67ec34b44446b3e7c8289",logs:[],blockNumber:119389,cumulativeGasUsed:"253928",status:1,byzantium:!0},args:[],solcInputHash:"c528a37588793ef74285d75e08d6b8eb",metadata:'{"compiler":{"version":"0.8.4+commit.c7e474f2"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"dataExchangeId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"secret","type":"uint256"}],"name":"Registration","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"registry","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"secret","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dataExchangeId","type":"uint256"},{"internalType":"uint256","name":"_secret","type":"uint256"}],"name":"setRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/NonRepudiation.sol":"NonRepudiation"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/NonRepudiation.sol":{"content":"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract NonRepudiation {\\n    struct Proof {\\n        uint256 timestamp;\\n        uint256 secret;\\n    }\\n    mapping(address => mapping (uint256 => Proof)) public registry;\\n    event Registration(address sender, uint256 dataExchangeId, uint256 timestamp, uint256 secret);\\n\\n    function setRegistry(uint256 _dataExchangeId, uint256 _secret) public {\\n        require(registry[msg.sender][_dataExchangeId].secret == 0);\\n        registry[msg.sender][_dataExchangeId] = Proof(block.timestamp, _secret);\\n        emit Registration(msg.sender, _dataExchangeId, block.timestamp, _secret);\\n    }\\n}\\n","keccak256":"0x8d371257a9b03c9102f158323e61f56ce49dd8489bd92c5a7d8abc3d9f6f8399","license":"Unlicense"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506103a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063032439371461003b578063d05cb54514610057575b600080fd5b6100556004803603810190610050919061023a565b610088565b005b610071600480360381019061006c91906101fe565b6101a3565b60405161007f9291906102d9565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010154146100e757600080fd5b6040518060400160405280428152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000155602082015181600101559050507faa58599838af2e5e0f3251cfbb4eac5d5d447ded49f6b0ac28d6b44098224e63338342846040516101979493929190610294565b60405180910390a15050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000813590506101e38161033e565b92915050565b6000813590506101f881610355565b92915050565b6000806040838503121561021157600080fd5b600061021f858286016101d4565b9250506020610230858286016101e9565b9150509250929050565b6000806040838503121561024d57600080fd5b600061025b858286016101e9565b925050602061026c858286016101e9565b9150509250929050565b61027f81610302565b82525050565b61028e81610334565b82525050565b60006080820190506102a96000830187610276565b6102b66020830186610285565b6102c36040830185610285565b6102d06060830184610285565b95945050505050565b60006040820190506102ee6000830185610285565b6102fb6020830184610285565b9392505050565b600061030d82610314565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61034781610302565b811461035257600080fd5b50565b61035e81610334565b811461036957600080fd5b5056fea26469706673582212204fd0fc653fb487221da9a14a4ca5d5499f9e9bc7b27ac8ab0f8d397fd6e3148564736f6c63430008040033",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063032439371461003b578063d05cb54514610057575b600080fd5b6100556004803603810190610050919061023a565b610088565b005b610071600480360381019061006c91906101fe565b6101a3565b60405161007f9291906102d9565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010154146100e757600080fd5b6040518060400160405280428152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000155602082015181600101559050507faa58599838af2e5e0f3251cfbb4eac5d5d447ded49f6b0ac28d6b44098224e63338342846040516101979493929190610294565b60405180910390a15050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000813590506101e38161033e565b92915050565b6000813590506101f881610355565b92915050565b6000806040838503121561021157600080fd5b600061021f858286016101d4565b9250506020610230858286016101e9565b9150509250929050565b6000806040838503121561024d57600080fd5b600061025b858286016101e9565b925050602061026c858286016101e9565b9150509250929050565b61027f81610302565b82525050565b61028e81610334565b82525050565b60006080820190506102a96000830187610276565b6102b66020830186610285565b6102c36040830185610285565b6102d06060830184610285565b95945050505050565b60006040820190506102ee6000830185610285565b6102fb6020830184610285565b9392505050565b600061030d82610314565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61034781610302565b811461035257600080fd5b50565b61035e81610334565b811461036957600080fd5b5056fea26469706673582212204fd0fc653fb487221da9a14a4ca5d5499f9e9bc7b27ac8ab0f8d397fd6e3148564736f6c63430008040033",devdoc:{kind:"dev",methods:{},version:1},userdoc:{kind:"user",methods:{},version:1},storageLayout:{storage:[{astId:13,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"registry",offset:0,slot:"0",type:"t_mapping(t_address,t_mapping(t_uint256,t_struct(Proof)6_storage))"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(Proof)6_storage))":{encoding:"mapping",key:"t_address",label:"mapping(address => mapping(uint256 => struct NonRepudiation.Proof))",numberOfBytes:"32",value:"t_mapping(t_uint256,t_struct(Proof)6_storage)"},"t_mapping(t_uint256,t_struct(Proof)6_storage)":{encoding:"mapping",key:"t_uint256",label:"mapping(uint256 => struct NonRepudiation.Proof)",numberOfBytes:"32",value:"t_struct(Proof)6_storage"},"t_struct(Proof)6_storage":{encoding:"inplace",label:"struct NonRepudiation.Proof",members:[{astId:3,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"timestamp",offset:0,slot:"0",type:"t_uint256"},{astId:5,contract:"contracts/NonRepudiation.sol:NonRepudiation",label:"secret",offset:0,slot:"1",type:"t_uint256"}],numberOfBytes:"64"},t_uint256:{encoding:"inplace",label:"uint256",numberOfBytes:"32"}}}}};async function q(e,i,a,r){let o=n.ethers.BigNumber.from(0),s=n.ethers.BigNumber.from(0);const c=v(t.bufToHex(f.decode(a)),!0);let d=0;do{try{({secret:o,timestamp:s}=await e.registry(v(i,!0),c))}catch(e){throw new h(e,["cannot contact the ledger"])}o.isZero()&&(d++,await new Promise((e=>setTimeout(e,1e3))))}while(o.isZero()&&d<r);if(o.isZero())throw new h(new Error(`timeout of ${r}s exceeded when querying the ledger and secret still not published`),["secret not published"]);return{hex:v(o.toHexString(),!1),iat:s.toNumber()}}async function W(e,i,a){const r=n.ethers.BigNumber.from(v(e,!0)),o=v(t.bufToHex(f.decode(i)),!0),s=await a.contract.populateTransaction.setRegistry(o,r,{gasLimit:a.dltConfig.gasLimit});s.nonce=await a.nextNonce(),s.gasLimit=s.gasLimit?._hex,s.gasPrice=(await a.provider.getGasPrice())._hex,s.chainId=(await a.provider.getNetwork()).chainId;const c=await a.getAddress();return s.from=v(c,!0),s}class M{}class G extends M{constructor(e){super(),this.initialized=new Promise(((t,i)=>{null!==e&&"object"==typeof e&&"function"==typeof e.then?e.then((e=>{this.dltConfig={...H,...e},this.provider=new n.ethers.providers.JsonRpcProvider(this.dltConfig.rpcProviderUrl),this.contract=new n.ethers.Contract(this.dltConfig.contract.address,this.dltConfig.contract.abi,this.provider),t(!0)})).catch((e=>i(e))):(this.dltConfig={...H,...e},this.provider=new n.ethers.providers.JsonRpcProvider(this.dltConfig.rpcProviderUrl),this.contract=new n.ethers.Contract(this.dltConfig.contract.address,this.dltConfig.contract.abi,this.provider),t(!0))}))}async getContractAddress(){return await this.initialized,this.contract.address}}class U extends G{async getSecretFromLedger(e,t,i){return await q(this.contract,e,t,i)}}class L extends G{constructor(e,t,i){super(new Promise(((t,a)=>{e.providerinfo.get().then((e=>{const r=e.rpcUrl;void 0===r?a(new Error("wallet is not connected to RRP endpoint")):t({...i,rpcProviderUrl:r})})).catch((e=>{a(e)}))}))),this.wallet=e,this.did=t}}class F extends L{async getSecretFromLedger(e,t,i){return await this.initialized,await q(this.contract,e,t,i)}}class K extends G{constructor(e,t,i){super(new Promise(((t,a)=>{e.providerinfoGet().then((e=>{const r=e.rpcUrl;void 0===r?a(new Error("wallet is not connected to RRP endpoint")):t({...i,rpcProviderUrl:r})})).catch((e=>{a(e)}))}))),this.wallet=e,this.did=t}}class V extends K{async getSecretFromLedger(e,t,i){return await this.initialized,await q(this.contract,e,t,i)}}class Z extends G{constructor(e,a){let r;super(e),this.count=-1,r=void 0===a?i.randBytesSync(32):"string"==typeof a?new Uint8Array(t.hexToBuf(a)):a;const o=new s.SigningKey(r);this.signer=new n.Wallet(o,this.provider)}async deploySecret(e,t){const i=await W(e,t,this),a=await this.signer.signTransaction(i),r=await this.signer.provider.sendTransaction(a);return this.count=this.count+1,r.hash}async getAddress(){return this.signer.address}async nextNonce(){const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}class X extends L{constructor(){super(...arguments),this.count=-1}async deploySecret(e,t){await this.initialized;const i=await W(e,t,this),a=(await this.wallet.identities.sign({did:this.did},{type:"Transaction",data:i})).signature,r=await this.provider.sendTransaction(a);return this.count=this.count+1,r.hash}async getAddress(){await this.initialized;const e=await this.wallet.identities.info({did:this.did});if(void 0===e.addresses)throw new h(new Error("no addresses for did "+this.did),["unexpected error"]);return e.addresses[0]}async nextNonce(){await this.initialized;const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}class Y extends K{constructor(){super(...arguments),this.count=-1}async deploySecret(e,t){await this.initialized;const i=await W(e,t,this),a=(await this.wallet.identitySign({did:this.did},{type:"Transaction",data:i})).signature,r=await this.provider.sendTransaction(a);return this.count=this.count+1,r.hash}async getAddress(){await this.initialized;const e=await this.wallet.identityInfo({did:this.did});if(void 0===e.addresses)throw new h(`Can't get address for did: ${this.did}`,["unexpected error"]);return e.addresses[0]}async nextNonce(){await this.initialized;const e=await this.provider.getTransactionCount(await this.getAddress(),"pending");return e>this.count&&(this.count=e),this.count}}var Q=Object.freeze({__proto__:null,EthersIoAgentDest:U,I3mWalletAgentDest:F,I3mServerWalletAgentDest:V,EthersIoAgentOrig:Z,I3mWalletAgentOrig:X,I3mServerWalletAgentOrig:Y});var ee=Object.freeze({__proto__:null,NonRepudiationDest:class{constructor(e,t,i){this.initialized=new Promise(((a,r)=>{this.asyncConstructor(e,t,i).then((()=>{a(!0)})).catch((e=>{r(e)}))}))}async asyncConstructor(e,t,i){await _(e),this.agreement=e,this.jwkPairDest={privateJwk:t,publicJwk:JSON.parse(e.dest)},this.publicJwkOrig=JSON.parse(e.orig),await S(this.jwkPairDest.publicJwk,this.jwkPairDest.privateJwk),this.dltAgent=i;const a=await this.dltAgent.getContractAddress();if(this.agreement.ledgerContractAddress!==a)throw new Error(`Contract address ${a} does not meet agreed one ${this.agreement.ledgerContractAddress}`);this.block={}}async verifyPoO(e,t,i){await this.initialized;const a=f.encode(await k(t,this.agreement.hashAlg),!0,!1),{payload:r}=await b(e),n={...this.agreement,cipherblockDgst:a,blockCommitment:r.exchange.blockCommitment,secretCommitment:r.exchange.secretCommitment},o={proofType:"PoO",iss:"orig",exchange:{...n,id:await E(n)}},s={timestamp:Date.now(),notBefore:"iat",notAfter:"iat",...i},c=await O(e,o,s);return this.block={jwe:t,poo:{jws:e,payload:c.payload}},this.exchange=c.payload.exchange,c}async generatePoR(){if(await this.initialized,void 0===this.exchange||void 0===this.block.poo)throw new Error("Before computing a PoR, you have first to receive a valid cipherblock with a PoO and validate the PoO");const e={proofType:"PoR",iss:"dest",exchange:this.exchange,poo:this.block.poo.jws};return this.block.por=await D(e,this.jwkPairDest.privateJwk),this.block.por}async verifyPoP(e,i){if(await this.initialized,void 0===this.exchange||void 0===this.block.por||void 0===this.block.poo)throw new Error("Cannot verify a PoP if not even a PoR have been created");const a={proofType:"PoP",iss:"orig",exchange:this.exchange,por:this.block.por.jws,secret:"",verificationCode:""},r={timestamp:Date.now(),notBefore:"iat",notAfter:1e3*this.block.poo.payload.iat+this.exchange.pooToPopDelay,...i},n=await O(e,a,r),o=JSON.parse(n.payload.secret);return this.block.secret={hex:t.bufToHex(f.decode(o.k)),jwk:o},this.block.pop={jws:e,payload:n.payload},n}async getSecretFromLedger(){if(await this.initialized,void 0===this.exchange||void 0===this.block.poo||void 0===this.block.por)throw new Error("Cannot get secret if a PoR has not been sent before");const e=Date.now(),t=1e3*this.block.poo.payload.iat+this.agreement.pooToSecretDelay,i=Math.round((t-e)/1e3),{hex:a,iat:r}=await this.dltAgent.getSecretFromLedger(this.agreement.ledgerSignerAddress,this.exchange.id,i);this.block.secret=await A(this.exchange.encAlg,a);try{y(1e3*r,1e3*this.block.por.payload.iat,1e3*this.block.poo.payload.iat+this.exchange.pooToSecretDelay)}catch(e){throw new h(`Although the secret has been obtained (and you could try to decrypt the cipherblock), it's been published later than agreed: ${new Date(1e3*r).toUTCString()} > ${new Date(1e3*this.block.poo.payload.iat+this.agreement.pooToSecretDelay).toUTCString()}`,["secret not published in time"])}return this.block.secret}async decrypt(){if(await this.initialized,void 0===this.exchange)throw new Error("No agreed exchange");if(void 0===this.block.secret?.jwk)throw new Error("Cannot decrypt without the secret");if(void 0===this.block.jwe)throw new Error("No cipherblock to decrypt");const e=(await u(this.block.jwe,this.block.secret.jwk)).plaintext;if(f.encode(await k(e,this.agreement.hashAlg),!0,!1)!==this.exchange.blockCommitment)throw new Error("Decrypted block does not meet the committed one");return this.block.raw=e,e}async generateVerificationRequest(){if(await this.initialized,void 0===this.block.por||void 0===this.exchange)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange");return await z("dest",this.exchange.id,this.block.por.jws,this.jwkPairDest.privateJwk)}async generateDisputeRequest(){if(await this.initialized,void 0===this.block.por||void 0===this.block.jwe||void 0===this.exchange)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange and have received the cipherblock");const e={proofType:"request",iss:"dest",por:this.block.por.jws,type:"disputeRequest",cipherblock:this.block.jwe,iat:Math.floor(Date.now()/1e3),dataExchangeId:this.exchange.id},t=await g(this.jwkPairDest.privateJwk);try{return await new r.SignJWT(e).setProtectedHeader({alg:this.jwkPairDest.privateJwk.alg}).setIssuedAt(e.iat).sign(t)}catch(e){throw new h(e,["unexpected error"])}}},NonRepudiationOrig:class{constructor(e,t,i,a){this.jwkPairOrig={privateJwk:t,publicJwk:JSON.parse(e.orig)},this.publicJwkDest=JSON.parse(e.dest),this.block={raw:i},this.initialized=new Promise(((t,i)=>{this.init(e,a).then((()=>{t(!0)})).catch((e=>{i(e)}))}))}async init(e,i){await _(e),this.agreement=e,await S(this.jwkPairOrig.publicJwk,this.jwkPairOrig.privateJwk);const a=await A(this.agreement.encAlg);this.block={...this.block,secret:a,jwe:await w(this.block.raw,a.jwk,this.agreement.encAlg)};const r=f.encode(await k(this.block.jwe,this.agreement.hashAlg),!0,!1),n=f.encode(await k(this.block.raw,this.agreement.hashAlg),!0,!1),o=f.encode(await k(new Uint8Array(t.hexToBuf(this.block.secret.hex)),this.agreement.hashAlg),!0,!1),s={...this.agreement,cipherblockDgst:r,blockCommitment:n,secretCommitment:o},c=await E(s);this.exchange={...s,id:c},await this._dltSetup(i)}async _dltSetup(e){this.dltAgent=e;const t=await this.dltAgent.getAddress();if(t!==this.exchange.ledgerSignerAddress)throw new Error(`ledgerSignerAddress: ${this.exchange.ledgerSignerAddress} does not meet the address ${t} derived from the provided private key`);const i=await this.dltAgent.getContractAddress();if(i!==v(this.agreement.ledgerContractAddress,!0))throw new Error(`Contract address in use ${i} does not meet the agreed one ${this.agreement.ledgerContractAddress}`)}async generatePoO(){return await this.initialized,this.block.poo=await D({proofType:"PoO",iss:"orig",exchange:this.exchange},this.jwkPairOrig.privateJwk),this.block.poo}async verifyPoR(e,t){if(await this.initialized,void 0===this.block.poo)throw new Error("Cannot verify a PoR if not even a PoO have been created");const i={proofType:"PoR",iss:"dest",exchange:this.exchange,poo:this.block.poo.jws},a=1e3*this.block.poo.payload.iat,r={timestamp:Date.now(),notBefore:a,notAfter:a+this.exchange.pooToPorDelay,...t},n=await O(e,i,r);return this.block.por={jws:e,payload:n.payload},this.block.por}async generatePoP(){if(await this.initialized,void 0===this.block.por)throw new Error("Before computing a PoP, you have first to have received and verified the PoR");const e=await this.dltAgent.deploySecret(this.block.secret.hex,this.exchange.id),t={proofType:"PoP",iss:"orig",exchange:this.exchange,por:this.block.por.jws,secret:JSON.stringify(this.block.secret.jwk),verificationCode:e};return this.block.pop=await D(t,this.jwkPairOrig.privateJwk),this.block.pop}async generateVerificationRequest(){if(await this.initialized,void 0===this.block.por)throw new Error("Before generating a VerificationRequest, you have first to hold a valid PoR for the exchange");return await z("orig",this.exchange.id,this.block.por.jws,this.jwkPairOrig.privateJwk)}}});exports.ConflictResolution=B,exports.ENC_ALGS=C,exports.EthersIoAgentDest=U,exports.EthersIoAgentOrig=Z,exports.HASH_ALGS=J,exports.I3mServerWalletAgentDest=V,exports.I3mServerWalletAgentOrig=Y,exports.I3mWalletAgentDest=F,exports.I3mWalletAgentOrig=X,exports.NonRepudiationProtocol=ee,exports.NrError=h,exports.SIGNING_ALGS=T,exports.Signers=Q,exports.checkTimestamp=y,exports.createProof=D,exports.defaultDltConfig=H,exports.exchangeId=E,exports.generateKeys=async function(e,a,r){const n=["ES256","ES384","ES512"];if(!n.includes(e))throw new h(new RangeError(`Invalid signature algorithm '${e}''. Allowed algorithms are ${n.toString()}`),["invalid algorithm"]);let o,s,c;switch(e){case"ES512":s="P-521",o=66;break;case"ES384":s="P-384",o=48;break;default:s="P-256",o=32}c=void 0!==a?"string"==typeof a?!0===r?f.decode(a):new Uint8Array(t.hexToBuf(a)):a:new Uint8Array(await i.randBytes(o));const d=new p("p"+s.substring(s.length-3)).keyFromPrivate(c),l=d.getPublic(),g=l.getX().toString("hex").padStart(2*o,"0"),w=l.getY().toString("hex").padStart(2*o,"0"),u=d.getPrivate("hex").padStart(2*o,"0"),b={kty:"EC",crv:s,x:f.encode(t.hexToBuf(g),!0,!1),y:f.encode(t.hexToBuf(w),!0,!1),d:f.encode(t.hexToBuf(u),!0,!1),alg:e},y={...b};return delete y.d,{publicJwk:y,privateJwk:b}},exports.getDltAddress=function(e){const t=e.match(/^did:ethr:(\w+:)?(0x[0-9a-fA-F]{40}[0-9a-fA-F]{26}?)$/),i=null!==t?t[t.length-1]:e;try{return n.ethers.utils.computeAddress(i)}catch(e){throw new h("no a DID or a valid public or private key",["invalid format"])}},exports.importJwk=g,exports.jsonSort=m,exports.jweDecrypt=u,exports.jweEncrypt=w,exports.jwsDecode=b,exports.oneTimeSecret=A,exports.parseAddress=P,exports.parseHex=v,exports.parseJwk=x,exports.sha=k,exports.validateAgreement=_,exports.verifyKeyPair=S,exports.verifyProof=O;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
